{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ymX9pFoyPSXa"
      },
      "source": [
        "#Exploratory Data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "tcI9ixq82y0c"
      },
      "outputs": [],
      "source": [
        "# import all library we need\n",
        "import re\n",
        "import string\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "from tensorflow.keras.utils import to_categorical\n",
        "from tensorflow.keras.preprocessing.text import Tokenizer\n",
        "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
        "\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.callbacks import EarlyStopping\n",
        "from tensorflow.keras.layers import Dense, LSTM, Embedding, Bidirectional"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "O-sPjUDM_x4I",
        "outputId": "8ac08ac2-847a-461e-9a49-f2a31df61993"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ],
      "source": [
        "# mount our personal drive\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "TwGubAufANo0"
      },
      "outputs": [],
      "source": [
        "# Read dataset \n",
        "df = pd.read_csv('/content/drive/MyDrive/customerService/twcs/twcs.csv')\n",
        "\n",
        "# df = pd.read_csv('/content/drive/My Drive/customerService/twcs/twcs.csv') #Aul"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "y6LYt7SfC_Hq",
        "outputId": "327762fc-6289-44f1-ed22-f4f307bcd6bb"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   tweet_id   author_id  inbound                      created_at  \\\n",
              "0         1  sprintcare    False  Tue Oct 31 22:10:47 +0000 2017   \n",
              "1         2      115712     True  Tue Oct 31 22:11:45 +0000 2017   \n",
              "2         3      115712     True  Tue Oct 31 22:08:27 +0000 2017   \n",
              "3         4  sprintcare    False  Tue Oct 31 21:54:49 +0000 2017   \n",
              "4         5      115712     True  Tue Oct 31 21:49:35 +0000 2017   \n",
              "\n",
              "                                                text response_tweet_id  \\\n",
              "0  @115712 I understand. I would like to assist y...                 2   \n",
              "1      @sprintcare and how do you propose we do that               NaN   \n",
              "2  @sprintcare I have sent several private messag...                 1   \n",
              "3  @115712 Please send us a Private Message so th...                 3   \n",
              "4                                 @sprintcare I did.                 4   \n",
              "\n",
              "   in_response_to_tweet_id  \n",
              "0                      3.0  \n",
              "1                      1.0  \n",
              "2                      4.0  \n",
              "3                      5.0  \n",
              "4                      6.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9647bdc7-26c4-429e-bf00-2f366b9f4dcb\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>tweet_id</th>\n",
              "      <th>author_id</th>\n",
              "      <th>inbound</th>\n",
              "      <th>created_at</th>\n",
              "      <th>text</th>\n",
              "      <th>response_tweet_id</th>\n",
              "      <th>in_response_to_tweet_id</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>sprintcare</td>\n",
              "      <td>False</td>\n",
              "      <td>Tue Oct 31 22:10:47 +0000 2017</td>\n",
              "      <td>@115712 I understand. I would like to assist y...</td>\n",
              "      <td>2</td>\n",
              "      <td>3.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>115712</td>\n",
              "      <td>True</td>\n",
              "      <td>Tue Oct 31 22:11:45 +0000 2017</td>\n",
              "      <td>@sprintcare and how do you propose we do that</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>115712</td>\n",
              "      <td>True</td>\n",
              "      <td>Tue Oct 31 22:08:27 +0000 2017</td>\n",
              "      <td>@sprintcare I have sent several private messag...</td>\n",
              "      <td>1</td>\n",
              "      <td>4.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>sprintcare</td>\n",
              "      <td>False</td>\n",
              "      <td>Tue Oct 31 21:54:49 +0000 2017</td>\n",
              "      <td>@115712 Please send us a Private Message so th...</td>\n",
              "      <td>3</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>115712</td>\n",
              "      <td>True</td>\n",
              "      <td>Tue Oct 31 21:49:35 +0000 2017</td>\n",
              "      <td>@sprintcare I did.</td>\n",
              "      <td>4</td>\n",
              "      <td>6.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9647bdc7-26c4-429e-bf00-2f366b9f4dcb')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-9647bdc7-26c4-429e-bf00-2f366b9f4dcb button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-9647bdc7-26c4-429e-bf00-2f366b9f4dcb');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ],
      "source": [
        "# Checking at a glance\n",
        "# Tweets have been formed by text from two or more people marked by where the NaN value of response_tweet_id(as end) and NaN value of in_response_to_tweet_id(as start)\n",
        "# tweet_id is identity number of text, author_id is the author of the text,  inbound relate true input into cs false reply from cs, response_tweet_id relate to what text(s) after it, in_response_to_tweet_id relate to what tweet(s) before it.\n",
        "df.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "5gK31El-CRIP",
        "outputId": "286ff2f9-ebdb-435e-c6cf-ba7e2567fa7b"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    tweet_id   author_id  inbound                      created_at  \\\n",
              "5          6  sprintcare    False  Tue Oct 31 21:46:24 +0000 2017   \n",
              "6          8      115712     True  Tue Oct 31 21:45:10 +0000 2017   \n",
              "7         11  sprintcare    False  Tue Oct 31 22:10:35 +0000 2017   \n",
              "8         12      115713     True  Tue Oct 31 22:04:47 +0000 2017   \n",
              "9         15  sprintcare    False  Tue Oct 31 20:03:31 +0000 2017   \n",
              "10        16      115713     True  Tue Oct 31 20:00:43 +0000 2017   \n",
              "11        17  sprintcare    False  Tue Oct 31 19:59:13 +0000 2017   \n",
              "12        18      115713     True  Tue Oct 31 19:56:01 +0000 2017   \n",
              "13        19  sprintcare    False  Tue Oct 31 22:10:10 +0000 2017   \n",
              "14        20      115715     True  Tue Oct 31 22:03:34 +0000 2017   \n",
              "\n",
              "                                                 text response_tweet_id  \\\n",
              "5   @115712 Can you please send us a private messa...               5,7   \n",
              "6           @sprintcare is the worst customer service            9,6,10   \n",
              "7   @115713 This is saddening to hear. Please shoo...               NaN   \n",
              "8   @sprintcare You gonna magically change your co...          11,13,14   \n",
              "9   @115713 We understand your concerns and we'd l...                12   \n",
              "10  @sprintcare Since I signed up with you....Sinc...                15   \n",
              "11  @115713 H there! We'd definitely like to work ...                16   \n",
              "12  @115714 y’all lie about your “great” connectio...                17   \n",
              "13  @115715 Please send me a private message so th...               NaN   \n",
              "14  @115714 whenever I contact customer support, t...                19   \n",
              "\n",
              "    in_response_to_tweet_id  \n",
              "5                       8.0  \n",
              "6                       NaN  \n",
              "7                      12.0  \n",
              "8                      15.0  \n",
              "9                      16.0  \n",
              "10                     17.0  \n",
              "11                     18.0  \n",
              "12                      NaN  \n",
              "13                     20.0  \n",
              "14                      NaN  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-61c91e6b-7a05-4ae5-9270-6fdd47f6b3f0\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>tweet_id</th>\n",
              "      <th>author_id</th>\n",
              "      <th>inbound</th>\n",
              "      <th>created_at</th>\n",
              "      <th>text</th>\n",
              "      <th>response_tweet_id</th>\n",
              "      <th>in_response_to_tweet_id</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>6</td>\n",
              "      <td>sprintcare</td>\n",
              "      <td>False</td>\n",
              "      <td>Tue Oct 31 21:46:24 +0000 2017</td>\n",
              "      <td>@115712 Can you please send us a private messa...</td>\n",
              "      <td>5,7</td>\n",
              "      <td>8.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>8</td>\n",
              "      <td>115712</td>\n",
              "      <td>True</td>\n",
              "      <td>Tue Oct 31 21:45:10 +0000 2017</td>\n",
              "      <td>@sprintcare is the worst customer service</td>\n",
              "      <td>9,6,10</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>11</td>\n",
              "      <td>sprintcare</td>\n",
              "      <td>False</td>\n",
              "      <td>Tue Oct 31 22:10:35 +0000 2017</td>\n",
              "      <td>@115713 This is saddening to hear. Please shoo...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>12.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>12</td>\n",
              "      <td>115713</td>\n",
              "      <td>True</td>\n",
              "      <td>Tue Oct 31 22:04:47 +0000 2017</td>\n",
              "      <td>@sprintcare You gonna magically change your co...</td>\n",
              "      <td>11,13,14</td>\n",
              "      <td>15.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>15</td>\n",
              "      <td>sprintcare</td>\n",
              "      <td>False</td>\n",
              "      <td>Tue Oct 31 20:03:31 +0000 2017</td>\n",
              "      <td>@115713 We understand your concerns and we'd l...</td>\n",
              "      <td>12</td>\n",
              "      <td>16.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>16</td>\n",
              "      <td>115713</td>\n",
              "      <td>True</td>\n",
              "      <td>Tue Oct 31 20:00:43 +0000 2017</td>\n",
              "      <td>@sprintcare Since I signed up with you....Sinc...</td>\n",
              "      <td>15</td>\n",
              "      <td>17.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>17</td>\n",
              "      <td>sprintcare</td>\n",
              "      <td>False</td>\n",
              "      <td>Tue Oct 31 19:59:13 +0000 2017</td>\n",
              "      <td>@115713 H there! We'd definitely like to work ...</td>\n",
              "      <td>16</td>\n",
              "      <td>18.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>18</td>\n",
              "      <td>115713</td>\n",
              "      <td>True</td>\n",
              "      <td>Tue Oct 31 19:56:01 +0000 2017</td>\n",
              "      <td>@115714 y’all lie about your “great” connectio...</td>\n",
              "      <td>17</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>19</td>\n",
              "      <td>sprintcare</td>\n",
              "      <td>False</td>\n",
              "      <td>Tue Oct 31 22:10:10 +0000 2017</td>\n",
              "      <td>@115715 Please send me a private message so th...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>20.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>20</td>\n",
              "      <td>115715</td>\n",
              "      <td>True</td>\n",
              "      <td>Tue Oct 31 22:03:34 +0000 2017</td>\n",
              "      <td>@115714 whenever I contact customer support, t...</td>\n",
              "      <td>19</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-61c91e6b-7a05-4ae5-9270-6fdd47f6b3f0')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-61c91e6b-7a05-4ae5-9270-6fdd47f6b3f0 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-61c91e6b-7a05-4ae5-9270-6fdd47f6b3f0');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ],
      "source": [
        "# Checking at a glance\n",
        "df[5:15]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 677
        },
        "id": "Khdzr-h76HXs",
        "outputId": "68bd3359-2f35-4620-8514-15e5a65e1558"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    tweet_id       author_id  inbound                      created_at  \\\n",
              "15        21    Ask_Spectrum    False  Tue Oct 31 22:14:37 +0000 2017   \n",
              "16        22          115716     True  Tue Oct 31 22:16:48 +0000 2017   \n",
              "17        25    Ask_Spectrum    False  Tue Oct 31 22:18:28 +0000 2017   \n",
              "18        26          115716     True  Tue Oct 31 22:19:56 +0000 2017   \n",
              "19        27    Ask_Spectrum    False  Tue Oct 31 22:21:26 +0000 2017   \n",
              "20        23          115716     True  Tue Oct 31 22:16:05 +0000 2017   \n",
              "21        24          115716     True  Tue Oct 31 22:13:02 +0000 2017   \n",
              "22        28    Ask_Spectrum    False  Tue Oct 31 22:05:37 +0000 2017   \n",
              "23        29          115716     True  Tue Oct 31 22:01:35 +0000 2017   \n",
              "24        30    Ask_Spectrum    False  Tue Oct 31 22:12:09 +0000 2017   \n",
              "25        31          115717     True  Tue Oct 31 22:06:54 +0000 2017   \n",
              "26        32    Ask_Spectrum    False  Tue Oct 31 22:10:08 +0000 2017   \n",
              "27        33          115718     True  Tue Oct 31 22:06:56 +0000 2017   \n",
              "28        34  VerizonSupport    False  Tue Oct 31 22:13:33 +0000 2017   \n",
              "29        35          115719     True  Tue Oct 31 22:49:16 +0000 2017   \n",
              "30        37  VerizonSupport    False  Tue Oct 31 22:52:00 +0000 2017   \n",
              "31        36          115719     True  Tue Oct 31 22:10:46 +0000 2017   \n",
              "32        38  VerizonSupport    False  Tue Oct 31 22:13:30 +0000 2017   \n",
              "33        39          115720     True  Tue Oct 31 22:12:16 +0000 2017   \n",
              "34        40  VerizonSupport    False  Tue Oct 31 22:12:00 +0000 2017   \n",
              "\n",
              "                                                 text response_tweet_id  \\\n",
              "15         @115716 What information is incorrect? ^JK             22,23   \n",
              "16  @Ask_Spectrum Would you like me to email you a...                25   \n",
              "17  @115716 Our department is part of the corporat...                26   \n",
              "18  @Ask_Spectrum I received this from your corpor...                27   \n",
              "19                          @115716 No thank you. ^JK               NaN   \n",
              "20  @Ask_Spectrum The correct way to do it is via ...               NaN   \n",
              "21  @Ask_Spectrum That is INCORRECT information I ...                21   \n",
              "22  @115716 The information pertaining to the acco...                24   \n",
              "23  actually that's a broken link you sent me and ...                28   \n",
              "24  @115717 Hello, My apologies for any frustratio...               NaN   \n",
              "25  Yo @Ask_Spectrum, your customer service reps a...                30   \n",
              "26  @115718 I apologize for the inconvenience. I w...               NaN   \n",
              "27  My picture on @Ask_Spectrum pretty much every ...                32   \n",
              "28  @115719 Help has arrived! We are sorry to see ...                35   \n",
              "29  @VerizonSupport I finally got someone that hel...                37   \n",
              "30  @115719 Awesome! If you ever need us we are ju...               NaN   \n",
              "31  somebody from @VerizonSupport please help meee...                34   \n",
              "32         @115720 Have your friend message us.\\n^ACM               NaN   \n",
              "33  @VerizonSupport My friend is without internet ...                38   \n",
              "34  @115721 Please follow and DM us so that we can...                41   \n",
              "\n",
              "    in_response_to_tweet_id  \n",
              "15                     24.0  \n",
              "16                     21.0  \n",
              "17                     22.0  \n",
              "18                     25.0  \n",
              "19                     26.0  \n",
              "20                     21.0  \n",
              "21                     28.0  \n",
              "22                     29.0  \n",
              "23                      NaN  \n",
              "24                     31.0  \n",
              "25                      NaN  \n",
              "26                     33.0  \n",
              "27                      NaN  \n",
              "28                     36.0  \n",
              "29                     34.0  \n",
              "30                     35.0  \n",
              "31                      NaN  \n",
              "32                     39.0  \n",
              "33                      NaN  \n",
              "34                     42.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-646f9d30-2792-45bb-9576-bd8dce67bc83\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>tweet_id</th>\n",
              "      <th>author_id</th>\n",
              "      <th>inbound</th>\n",
              "      <th>created_at</th>\n",
              "      <th>text</th>\n",
              "      <th>response_tweet_id</th>\n",
              "      <th>in_response_to_tweet_id</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>21</td>\n",
              "      <td>Ask_Spectrum</td>\n",
              "      <td>False</td>\n",
              "      <td>Tue Oct 31 22:14:37 +0000 2017</td>\n",
              "      <td>@115716 What information is incorrect? ^JK</td>\n",
              "      <td>22,23</td>\n",
              "      <td>24.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>22</td>\n",
              "      <td>115716</td>\n",
              "      <td>True</td>\n",
              "      <td>Tue Oct 31 22:16:48 +0000 2017</td>\n",
              "      <td>@Ask_Spectrum Would you like me to email you a...</td>\n",
              "      <td>25</td>\n",
              "      <td>21.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>25</td>\n",
              "      <td>Ask_Spectrum</td>\n",
              "      <td>False</td>\n",
              "      <td>Tue Oct 31 22:18:28 +0000 2017</td>\n",
              "      <td>@115716 Our department is part of the corporat...</td>\n",
              "      <td>26</td>\n",
              "      <td>22.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>26</td>\n",
              "      <td>115716</td>\n",
              "      <td>True</td>\n",
              "      <td>Tue Oct 31 22:19:56 +0000 2017</td>\n",
              "      <td>@Ask_Spectrum I received this from your corpor...</td>\n",
              "      <td>27</td>\n",
              "      <td>25.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>27</td>\n",
              "      <td>Ask_Spectrum</td>\n",
              "      <td>False</td>\n",
              "      <td>Tue Oct 31 22:21:26 +0000 2017</td>\n",
              "      <td>@115716 No thank you. ^JK</td>\n",
              "      <td>NaN</td>\n",
              "      <td>26.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>23</td>\n",
              "      <td>115716</td>\n",
              "      <td>True</td>\n",
              "      <td>Tue Oct 31 22:16:05 +0000 2017</td>\n",
              "      <td>@Ask_Spectrum The correct way to do it is via ...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>21.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>24</td>\n",
              "      <td>115716</td>\n",
              "      <td>True</td>\n",
              "      <td>Tue Oct 31 22:13:02 +0000 2017</td>\n",
              "      <td>@Ask_Spectrum That is INCORRECT information I ...</td>\n",
              "      <td>21</td>\n",
              "      <td>28.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>28</td>\n",
              "      <td>Ask_Spectrum</td>\n",
              "      <td>False</td>\n",
              "      <td>Tue Oct 31 22:05:37 +0000 2017</td>\n",
              "      <td>@115716 The information pertaining to the acco...</td>\n",
              "      <td>24</td>\n",
              "      <td>29.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>29</td>\n",
              "      <td>115716</td>\n",
              "      <td>True</td>\n",
              "      <td>Tue Oct 31 22:01:35 +0000 2017</td>\n",
              "      <td>actually that's a broken link you sent me and ...</td>\n",
              "      <td>28</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>30</td>\n",
              "      <td>Ask_Spectrum</td>\n",
              "      <td>False</td>\n",
              "      <td>Tue Oct 31 22:12:09 +0000 2017</td>\n",
              "      <td>@115717 Hello, My apologies for any frustratio...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>31.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>31</td>\n",
              "      <td>115717</td>\n",
              "      <td>True</td>\n",
              "      <td>Tue Oct 31 22:06:54 +0000 2017</td>\n",
              "      <td>Yo @Ask_Spectrum, your customer service reps a...</td>\n",
              "      <td>30</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>32</td>\n",
              "      <td>Ask_Spectrum</td>\n",
              "      <td>False</td>\n",
              "      <td>Tue Oct 31 22:10:08 +0000 2017</td>\n",
              "      <td>@115718 I apologize for the inconvenience. I w...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>33.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>33</td>\n",
              "      <td>115718</td>\n",
              "      <td>True</td>\n",
              "      <td>Tue Oct 31 22:06:56 +0000 2017</td>\n",
              "      <td>My picture on @Ask_Spectrum pretty much every ...</td>\n",
              "      <td>32</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>34</td>\n",
              "      <td>VerizonSupport</td>\n",
              "      <td>False</td>\n",
              "      <td>Tue Oct 31 22:13:33 +0000 2017</td>\n",
              "      <td>@115719 Help has arrived! We are sorry to see ...</td>\n",
              "      <td>35</td>\n",
              "      <td>36.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>35</td>\n",
              "      <td>115719</td>\n",
              "      <td>True</td>\n",
              "      <td>Tue Oct 31 22:49:16 +0000 2017</td>\n",
              "      <td>@VerizonSupport I finally got someone that hel...</td>\n",
              "      <td>37</td>\n",
              "      <td>34.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30</th>\n",
              "      <td>37</td>\n",
              "      <td>VerizonSupport</td>\n",
              "      <td>False</td>\n",
              "      <td>Tue Oct 31 22:52:00 +0000 2017</td>\n",
              "      <td>@115719 Awesome! If you ever need us we are ju...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>35.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31</th>\n",
              "      <td>36</td>\n",
              "      <td>115719</td>\n",
              "      <td>True</td>\n",
              "      <td>Tue Oct 31 22:10:46 +0000 2017</td>\n",
              "      <td>somebody from @VerizonSupport please help meee...</td>\n",
              "      <td>34</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32</th>\n",
              "      <td>38</td>\n",
              "      <td>VerizonSupport</td>\n",
              "      <td>False</td>\n",
              "      <td>Tue Oct 31 22:13:30 +0000 2017</td>\n",
              "      <td>@115720 Have your friend message us.\\n^ACM</td>\n",
              "      <td>NaN</td>\n",
              "      <td>39.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>39</td>\n",
              "      <td>115720</td>\n",
              "      <td>True</td>\n",
              "      <td>Tue Oct 31 22:12:16 +0000 2017</td>\n",
              "      <td>@VerizonSupport My friend is without internet ...</td>\n",
              "      <td>38</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>34</th>\n",
              "      <td>40</td>\n",
              "      <td>VerizonSupport</td>\n",
              "      <td>False</td>\n",
              "      <td>Tue Oct 31 22:12:00 +0000 2017</td>\n",
              "      <td>@115721 Please follow and DM us so that we can...</td>\n",
              "      <td>41</td>\n",
              "      <td>42.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-646f9d30-2792-45bb-9576-bd8dce67bc83')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-646f9d30-2792-45bb-9576-bd8dce67bc83 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-646f9d30-2792-45bb-9576-bd8dce67bc83');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ],
      "source": [
        "# Checking at a glance\n",
        "df[15:35]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bFjNXoZDOanu",
        "outputId": "fea48fd2-4097-4dc3-ea3b-7c908fc409f9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 2811774 entries, 0 to 2811773\n",
            "Data columns (total 7 columns):\n",
            " #   Column                   Dtype  \n",
            "---  ------                   -----  \n",
            " 0   tweet_id                 int64  \n",
            " 1   author_id                object \n",
            " 2   inbound                  bool   \n",
            " 3   created_at               object \n",
            " 4   text                     object \n",
            " 5   response_tweet_id        object \n",
            " 6   in_response_to_tweet_id  float64\n",
            "dtypes: bool(1), float64(1), int64(1), object(4)\n",
            "memory usage: 131.4+ MB\n"
          ]
        }
      ],
      "source": [
        "# checking data entries, memory usage, and data type\n",
        "df.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "id": "PpfcQEk8v9sK"
      },
      "outputs": [],
      "source": [
        "#Converting to datetime format\n",
        "df[\"created_at\"]= pd.to_datetime(df[\"created_at\"])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IdzBLcjh3KT2",
        "outputId": "f1db46d5-d182-402c-dd0e-c6d07277d9eb"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 2811774 entries, 0 to 2811773\n",
            "Data columns (total 7 columns):\n",
            " #   Column                   Dtype              \n",
            "---  ------                   -----              \n",
            " 0   tweet_id                 int64              \n",
            " 1   author_id                object             \n",
            " 2   inbound                  bool               \n",
            " 3   created_at               datetime64[ns, UTC]\n",
            " 4   text                     object             \n",
            " 5   response_tweet_id        object             \n",
            " 6   in_response_to_tweet_id  float64            \n",
            "dtypes: bool(1), datetime64[ns, UTC](1), float64(1), int64(1), object(3)\n",
            "memory usage: 131.4+ MB\n"
          ]
        }
      ],
      "source": [
        "# checking data entries, memory usage, and data type after formatting\n",
        "df.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "QKElamEP3Rp0",
        "outputId": "7aeb208d-8d2d-423d-813b-d2eb36e32d0d"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   tweet_id   author_id  inbound                created_at  \\\n",
              "0         1  sprintcare    False 2017-10-31 22:10:47+00:00   \n",
              "1         2      115712     True 2017-10-31 22:11:45+00:00   \n",
              "2         3      115712     True 2017-10-31 22:08:27+00:00   \n",
              "3         4  sprintcare    False 2017-10-31 21:54:49+00:00   \n",
              "4         5      115712     True 2017-10-31 21:49:35+00:00   \n",
              "\n",
              "                                                text response_tweet_id  \\\n",
              "0  @115712 I understand. I would like to assist y...                 2   \n",
              "1      @sprintcare and how do you propose we do that               NaN   \n",
              "2  @sprintcare I have sent several private messag...                 1   \n",
              "3  @115712 Please send us a Private Message so th...                 3   \n",
              "4                                 @sprintcare I did.                 4   \n",
              "\n",
              "   in_response_to_tweet_id  \n",
              "0                      3.0  \n",
              "1                      1.0  \n",
              "2                      4.0  \n",
              "3                      5.0  \n",
              "4                      6.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-528da5f3-46c6-4577-ae73-a2fcabd4f1c4\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>tweet_id</th>\n",
              "      <th>author_id</th>\n",
              "      <th>inbound</th>\n",
              "      <th>created_at</th>\n",
              "      <th>text</th>\n",
              "      <th>response_tweet_id</th>\n",
              "      <th>in_response_to_tweet_id</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>sprintcare</td>\n",
              "      <td>False</td>\n",
              "      <td>2017-10-31 22:10:47+00:00</td>\n",
              "      <td>@115712 I understand. I would like to assist y...</td>\n",
              "      <td>2</td>\n",
              "      <td>3.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>115712</td>\n",
              "      <td>True</td>\n",
              "      <td>2017-10-31 22:11:45+00:00</td>\n",
              "      <td>@sprintcare and how do you propose we do that</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>115712</td>\n",
              "      <td>True</td>\n",
              "      <td>2017-10-31 22:08:27+00:00</td>\n",
              "      <td>@sprintcare I have sent several private messag...</td>\n",
              "      <td>1</td>\n",
              "      <td>4.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>sprintcare</td>\n",
              "      <td>False</td>\n",
              "      <td>2017-10-31 21:54:49+00:00</td>\n",
              "      <td>@115712 Please send us a Private Message so th...</td>\n",
              "      <td>3</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>115712</td>\n",
              "      <td>True</td>\n",
              "      <td>2017-10-31 21:49:35+00:00</td>\n",
              "      <td>@sprintcare I did.</td>\n",
              "      <td>4</td>\n",
              "      <td>6.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-528da5f3-46c6-4577-ae73-a2fcabd4f1c4')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-528da5f3-46c6-4577-ae73-a2fcabd4f1c4 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-528da5f3-46c6-4577-ae73-a2fcabd4f1c4');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ],
      "source": [
        "# checking formatted created_at as YYYY-MM-DD TIME\n",
        "df.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bdNHcU3MOtD_",
        "outputId": "93922066-2507-4fe9-fe67-5a0e5e9ba73e"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "tweet_id                         0\n",
              "author_id                        0\n",
              "inbound                          0\n",
              "created_at                       0\n",
              "text                             0\n",
              "response_tweet_id          1040629\n",
              "in_response_to_tweet_id     794335\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ],
      "source": [
        "# checking isnull data\n",
        "df.isnull().sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hmwKuD0dd3QT",
        "outputId": "549f70c4-914c-4f41-ea8f-c541bccc653e"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ],
      "source": [
        "#check duplicate\n",
        "df.duplicated().sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uReh5pylCvDw",
        "outputId": "b8bd6fa0-0bf4-4abb-84ee-259e5d187932"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([False,  True])"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ],
      "source": [
        "# list all unique value of inbound\n",
        "np.unique(df[\"inbound\"])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oNPrKqhvOMMU"
      },
      "source": [
        "false means tweet from customer service agent and true tweets from customer"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "id": "mqAlotRgDBB7"
      },
      "outputs": [],
      "source": [
        "ai = np.unique(df[\"author_id\"])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ODzvs3vUD93X",
        "outputId": "b6e77eca-a849-46f4-f23b-bef64fb38c8f"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "702777"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ],
      "source": [
        "# checking unique value of author_id\n",
        "np.count_nonzero(ai)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "id": "HeiFBxCD8j9-"
      },
      "outputs": [],
      "source": [
        "# sorted by time\n",
        "df_new = df.sort_values(\"created_at\",ascending=False)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "dQKGzFxH8t4X",
        "outputId": "8949a8c8-611c-4b52-99a0-a8ca412124fb"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        tweet_id   author_id  inbound                created_at  \\\n",
              "524147    589938      259493     True 2017-12-03 23:14:01+00:00   \n",
              "533916    600365  AmazonHelp    False 2017-12-03 23:13:02+00:00   \n",
              "537388    603932  AmazonHelp    False 2017-12-03 23:13:00+00:00   \n",
              "531793    597923  AmazonHelp    False 2017-12-03 23:13:00+00:00   \n",
              "537559    604104   AskPayPal    False 2017-12-03 23:12:50+00:00   \n",
              "\n",
              "                                                     text response_tweet_id  \\\n",
              "524147  @GWRHelp @259492 @259491 I think the confusion...               NaN   \n",
              "533916  @220550 Hi there! Please click the link given ...               NaN   \n",
              "537388  @263540 Je vous prie dans ce cas-là de le sign...               NaN   \n",
              "531793  @261758 When you contacted us, what options/in...               NaN   \n",
              "537559  @263599 Sorry to hear this. If you would like ...               NaN   \n",
              "\n",
              "        in_response_to_tweet_id  \n",
              "524147                 589937.0  \n",
              "533916                 600364.0  \n",
              "537388                 603933.0  \n",
              "531793                 597922.0  \n",
              "537559                 604105.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6099970a-d632-4e5c-b662-98f6d4621f4e\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>tweet_id</th>\n",
              "      <th>author_id</th>\n",
              "      <th>inbound</th>\n",
              "      <th>created_at</th>\n",
              "      <th>text</th>\n",
              "      <th>response_tweet_id</th>\n",
              "      <th>in_response_to_tweet_id</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>524147</th>\n",
              "      <td>589938</td>\n",
              "      <td>259493</td>\n",
              "      <td>True</td>\n",
              "      <td>2017-12-03 23:14:01+00:00</td>\n",
              "      <td>@GWRHelp @259492 @259491 I think the confusion...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>589937.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>533916</th>\n",
              "      <td>600365</td>\n",
              "      <td>AmazonHelp</td>\n",
              "      <td>False</td>\n",
              "      <td>2017-12-03 23:13:02+00:00</td>\n",
              "      <td>@220550 Hi there! Please click the link given ...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>600364.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>537388</th>\n",
              "      <td>603932</td>\n",
              "      <td>AmazonHelp</td>\n",
              "      <td>False</td>\n",
              "      <td>2017-12-03 23:13:00+00:00</td>\n",
              "      <td>@263540 Je vous prie dans ce cas-là de le sign...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>603933.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>531793</th>\n",
              "      <td>597923</td>\n",
              "      <td>AmazonHelp</td>\n",
              "      <td>False</td>\n",
              "      <td>2017-12-03 23:13:00+00:00</td>\n",
              "      <td>@261758 When you contacted us, what options/in...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>597922.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>537559</th>\n",
              "      <td>604104</td>\n",
              "      <td>AskPayPal</td>\n",
              "      <td>False</td>\n",
              "      <td>2017-12-03 23:12:50+00:00</td>\n",
              "      <td>@263599 Sorry to hear this. If you would like ...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>604105.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6099970a-d632-4e5c-b662-98f6d4621f4e')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-6099970a-d632-4e5c-b662-98f6d4621f4e button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-6099970a-d632-4e5c-b662-98f6d4621f4e');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ],
      "source": [
        "df_new.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "awl7LeSpZBZi",
        "outputId": "24b6db00-aa90-4836-d34a-b86ca23cfbbe"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        tweet_id     author_id  inbound                created_at  \\\n",
              "533916    600365    AmazonHelp    False 2017-12-03 23:13:02+00:00   \n",
              "537388    603932    AmazonHelp    False 2017-12-03 23:13:00+00:00   \n",
              "531793    597923    AmazonHelp    False 2017-12-03 23:13:00+00:00   \n",
              "537559    604104     AskPayPal    False 2017-12-03 23:12:50+00:00   \n",
              "536036    602562   XboxSupport    False 2017-12-03 23:12:44+00:00   \n",
              "...          ...           ...      ...                       ...   \n",
              "535718    602240        262956     True 2017-12-03 23:04:08+00:00   \n",
              "537629    604180    ATVIAssist    False 2017-12-03 23:04:01+00:00   \n",
              "537416    603959    AmazonHelp    False 2017-12-03 23:04:00+00:00   \n",
              "537495    604036  hulu_support    False 2017-12-03 23:03:52+00:00   \n",
              "537391    603935        263540     True 2017-12-03 23:03:51+00:00   \n",
              "\n",
              "                                                     text response_tweet_id  \\\n",
              "533916  @220550 Hi there! Please click the link given ...               NaN   \n",
              "537388  @263540 Je vous prie dans ce cas-là de le sign...               NaN   \n",
              "531793  @261758 When you contacted us, what options/in...               NaN   \n",
              "537559  @263599 Sorry to hear this. If you would like ...               NaN   \n",
              "536036  @263050 According to https://t.co/Qlgzk9sJUt, ...               NaN   \n",
              "...                                                   ...               ...   \n",
              "535718  @AmazonHelp I have done this many times, alrea...               NaN   \n",
              "537629  @263625 Hey there! Please leave all feedback a...               NaN   \n",
              "537416  @263548 If you don't see a membership here: ht...               NaN   \n",
              "537495  @263574 Hey Patrick! We can't make any promise...               NaN   \n",
              "537391  @AmazonHelp Non du tout le transport était par...            603934   \n",
              "\n",
              "        in_response_to_tweet_id  \n",
              "533916                 600364.0  \n",
              "537388                 603933.0  \n",
              "531793                 597922.0  \n",
              "537559                 604105.0  \n",
              "536036                 602560.0  \n",
              "...                         ...  \n",
              "535718                 602239.0  \n",
              "537629                 604181.0  \n",
              "537416                 603960.0  \n",
              "537495                 604037.0  \n",
              "537391                 603936.0  \n",
              "\n",
              "[77 rows x 7 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1aff2a25-a076-4cee-996f-991d87fea2a1\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>tweet_id</th>\n",
              "      <th>author_id</th>\n",
              "      <th>inbound</th>\n",
              "      <th>created_at</th>\n",
              "      <th>text</th>\n",
              "      <th>response_tweet_id</th>\n",
              "      <th>in_response_to_tweet_id</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>533916</th>\n",
              "      <td>600365</td>\n",
              "      <td>AmazonHelp</td>\n",
              "      <td>False</td>\n",
              "      <td>2017-12-03 23:13:02+00:00</td>\n",
              "      <td>@220550 Hi there! Please click the link given ...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>600364.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>537388</th>\n",
              "      <td>603932</td>\n",
              "      <td>AmazonHelp</td>\n",
              "      <td>False</td>\n",
              "      <td>2017-12-03 23:13:00+00:00</td>\n",
              "      <td>@263540 Je vous prie dans ce cas-là de le sign...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>603933.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>531793</th>\n",
              "      <td>597923</td>\n",
              "      <td>AmazonHelp</td>\n",
              "      <td>False</td>\n",
              "      <td>2017-12-03 23:13:00+00:00</td>\n",
              "      <td>@261758 When you contacted us, what options/in...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>597922.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>537559</th>\n",
              "      <td>604104</td>\n",
              "      <td>AskPayPal</td>\n",
              "      <td>False</td>\n",
              "      <td>2017-12-03 23:12:50+00:00</td>\n",
              "      <td>@263599 Sorry to hear this. If you would like ...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>604105.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>536036</th>\n",
              "      <td>602562</td>\n",
              "      <td>XboxSupport</td>\n",
              "      <td>False</td>\n",
              "      <td>2017-12-03 23:12:44+00:00</td>\n",
              "      <td>@263050 According to https://t.co/Qlgzk9sJUt, ...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>602560.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>535718</th>\n",
              "      <td>602240</td>\n",
              "      <td>262956</td>\n",
              "      <td>True</td>\n",
              "      <td>2017-12-03 23:04:08+00:00</td>\n",
              "      <td>@AmazonHelp I have done this many times, alrea...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>602239.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>537629</th>\n",
              "      <td>604180</td>\n",
              "      <td>ATVIAssist</td>\n",
              "      <td>False</td>\n",
              "      <td>2017-12-03 23:04:01+00:00</td>\n",
              "      <td>@263625 Hey there! Please leave all feedback a...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>604181.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>537416</th>\n",
              "      <td>603959</td>\n",
              "      <td>AmazonHelp</td>\n",
              "      <td>False</td>\n",
              "      <td>2017-12-03 23:04:00+00:00</td>\n",
              "      <td>@263548 If you don't see a membership here: ht...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>603960.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>537495</th>\n",
              "      <td>604036</td>\n",
              "      <td>hulu_support</td>\n",
              "      <td>False</td>\n",
              "      <td>2017-12-03 23:03:52+00:00</td>\n",
              "      <td>@263574 Hey Patrick! We can't make any promise...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>604037.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>537391</th>\n",
              "      <td>603935</td>\n",
              "      <td>263540</td>\n",
              "      <td>True</td>\n",
              "      <td>2017-12-03 23:03:51+00:00</td>\n",
              "      <td>@AmazonHelp Non du tout le transport était par...</td>\n",
              "      <td>603934</td>\n",
              "      <td>603936.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>77 rows × 7 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1aff2a25-a076-4cee-996f-991d87fea2a1')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-1aff2a25-a076-4cee-996f-991d87fea2a1 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-1aff2a25-a076-4cee-996f-991d87fea2a1');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ],
      "source": [
        "df_new[1:78]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xpQdL8p-kVWj"
      },
      "source": [
        "#Data Preprocessing"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 49
        },
        "id": "6jTfKYzGTpit",
        "outputId": "17ef55b5-8604-4776-d6d3-383c336e70f1"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Empty DataFrame\n",
              "Columns: [tweet_id, author_id, inbound, created_at, text, response_tweet_id, in_response_to_tweet_id]\n",
              "Index: []"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c1ef1ed8-a42f-4c13-be33-3e0edf21034f\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>tweet_id</th>\n",
              "      <th>author_id</th>\n",
              "      <th>inbound</th>\n",
              "      <th>created_at</th>\n",
              "      <th>text</th>\n",
              "      <th>response_tweet_id</th>\n",
              "      <th>in_response_to_tweet_id</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c1ef1ed8-a42f-4c13-be33-3e0edf21034f')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-c1ef1ed8-a42f-4c13-be33-3e0edf21034f button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-c1ef1ed8-a42f-4c13-be33-3e0edf21034f');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ],
      "source": [
        "# What author_id we want to consider their conversation from sample.csv \n",
        "only_105860 = df_new[df_new[\"author_id\"].isin([\"105860\"])]\n",
        "\n",
        "only_105860.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "Pitysi-mwfkw",
        "outputId": "e3c68354-f58e-435c-f0cf-d2ff9f5ce1f2"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         tweet_id author_id  inbound                created_at  \\\n",
              "524147     589938    259493     True 2017-12-03 23:14:01+00:00   \n",
              "2064927   2224070    259493     True 2017-11-10 13:13:20+00:00   \n",
              "1876542   2032563    259493     True 2017-11-07 15:56:37+00:00   \n",
              "1876544   2032564    259493     True 2017-11-07 15:30:44+00:00   \n",
              "1812757   1968331    259493     True 2017-10-18 18:04:35+00:00   \n",
              "\n",
              "                                                      text response_tweet_id  \\\n",
              "524147   @GWRHelp @259492 @259491 I think the confusion...               NaN   \n",
              "2064927  @115793 @SW_Help Approaching sunset at Clapham...   2224069,2224071   \n",
              "1876542  @SW_Help OK thanks. And will I be ok using my ...           2032565   \n",
              "1876544  @SW_Help Hi, could you confirm whereabouts in ...           2032562   \n",
              "1812757  @SW_Help @330583 The 1759 you were waiting for...               NaN   \n",
              "\n",
              "         in_response_to_tweet_id  \n",
              "524147                  589937.0  \n",
              "2064927                      NaN  \n",
              "1876542                2032562.0  \n",
              "1876544                      NaN  \n",
              "1812757                1968330.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1c4bce9e-f189-4643-835e-49acbb0f0113\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>tweet_id</th>\n",
              "      <th>author_id</th>\n",
              "      <th>inbound</th>\n",
              "      <th>created_at</th>\n",
              "      <th>text</th>\n",
              "      <th>response_tweet_id</th>\n",
              "      <th>in_response_to_tweet_id</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>524147</th>\n",
              "      <td>589938</td>\n",
              "      <td>259493</td>\n",
              "      <td>True</td>\n",
              "      <td>2017-12-03 23:14:01+00:00</td>\n",
              "      <td>@GWRHelp @259492 @259491 I think the confusion...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>589937.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2064927</th>\n",
              "      <td>2224070</td>\n",
              "      <td>259493</td>\n",
              "      <td>True</td>\n",
              "      <td>2017-11-10 13:13:20+00:00</td>\n",
              "      <td>@115793 @SW_Help Approaching sunset at Clapham...</td>\n",
              "      <td>2224069,2224071</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1876542</th>\n",
              "      <td>2032563</td>\n",
              "      <td>259493</td>\n",
              "      <td>True</td>\n",
              "      <td>2017-11-07 15:56:37+00:00</td>\n",
              "      <td>@SW_Help OK thanks. And will I be ok using my ...</td>\n",
              "      <td>2032565</td>\n",
              "      <td>2032562.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1876544</th>\n",
              "      <td>2032564</td>\n",
              "      <td>259493</td>\n",
              "      <td>True</td>\n",
              "      <td>2017-11-07 15:30:44+00:00</td>\n",
              "      <td>@SW_Help Hi, could you confirm whereabouts in ...</td>\n",
              "      <td>2032562</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1812757</th>\n",
              "      <td>1968331</td>\n",
              "      <td>259493</td>\n",
              "      <td>True</td>\n",
              "      <td>2017-10-18 18:04:35+00:00</td>\n",
              "      <td>@SW_Help @330583 The 1759 you were waiting for...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1968330.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1c4bce9e-f189-4643-835e-49acbb0f0113')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-1c4bce9e-f189-4643-835e-49acbb0f0113 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-1c4bce9e-f189-4643-835e-49acbb0f0113');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ],
      "source": [
        "# random from dataset != with sample.csv\n",
        "only_259493 = df_new[df_new[\"author_id\"].isin([\"259493\"])]\n",
        "\n",
        "only_259493.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 81
        },
        "id": "hGQhVhU-AQU9",
        "outputId": "7ade7546-0fe0-406f-acfa-9164bae03df7"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    tweet_id author_id  inbound                      created_at  \\\n",
              "89    119331    105860     True  Wed Oct 11 13:47:14 +0000 2017   \n",
              "\n",
              "                                                 text response_tweet_id  \\\n",
              "89  They reschedule my shit for tomorrow https://t...            119330   \n",
              "\n",
              "    in_response_to_tweet_id  \n",
              "89                      NaN  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b22d7725-4093-4e4b-8df6-7deb196ac5e2\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>tweet_id</th>\n",
              "      <th>author_id</th>\n",
              "      <th>inbound</th>\n",
              "      <th>created_at</th>\n",
              "      <th>text</th>\n",
              "      <th>response_tweet_id</th>\n",
              "      <th>in_response_to_tweet_id</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>89</th>\n",
              "      <td>119331</td>\n",
              "      <td>105860</td>\n",
              "      <td>True</td>\n",
              "      <td>Wed Oct 11 13:47:14 +0000 2017</td>\n",
              "      <td>They reschedule my shit for tomorrow https://t...</td>\n",
              "      <td>119330</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b22d7725-4093-4e4b-8df6-7deb196ac5e2')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-b22d7725-4093-4e4b-8df6-7deb196ac5e2 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-b22d7725-4093-4e4b-8df6-7deb196ac5e2');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ],
      "source": [
        "#firstly, upload data to file\n",
        "sample = pd.read_csv('/content/drive/MyDrive/customerService/sample.csv')\n",
        "only_105860_sample = sample[sample[\"author_id\"].isin([\"105860\"])]\n",
        "only_105860_sample"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "metadata": {
        "id": "7b6PBJcwJj3v"
      },
      "outputs": [],
      "source": [
        "# data preprocessing\n",
        "str_punc = string.punctuation.replace(',', '').replace(\"'\",'')#no need any punctuation\n",
        "\n",
        "def cleaningdata(text):\n",
        "    global str_punc\n",
        "    text = re.sub(r'[^a-zA-Z, ' ']','',text)#regular expression [^a-zA-Z] means any character that IS NOT a-z OR A-Z will be removed\n",
        "    text = text.lower() # making text in lower formatted\n",
        "    return text    "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "metadata": {
        "id": "lteXM-BMOaCI"
      },
      "outputs": [],
      "source": [
        "# Read dataset & Preprocess text\n",
        "df_train = pd.read_csv('/content/drive/MyDrive/customerService/train_data.csv', sep=',')\n",
        "df_val = pd.read_csv('/content/drive/MyDrive/customerService/val_data.csv', sep=',')\n",
        "df_test = pd.read_csv('/content/drive/MyDrive/customerService/test_data.csv', sep=',')\n",
        "# from challenge NLP we convert to sentiment analysis(positive,nehative and neutral)\n",
        "df_train['emotions'] = df_train['emotions'].replace(['joy','love'],'positive').replace(['anger','fear','sadness'],'negative').replace(['surprise'],'neutral')\n",
        "df_val['emotions'] = df_val['emotions'].replace(['joy','love'],'positive').replace(['anger','fear','sadness'],'negative').replace(['surprise'],'neutral')\n",
        "df_test['emotions'] = df_test['emotions'].replace(['joy','love'],'positive').replace(['anger','fear','sadness'],'negative').replace(['surprise'],'neutral')\n",
        "# applying alphabetical(a-Z) function to our data target\n",
        "X_train = df_train['text'].apply(cleaningdata)\n",
        "y_train = df_train['emotions']\n",
        "\n",
        "X_test = df_test['text'].apply(cleaningdata)\n",
        "y_test = df_test['emotions']\n",
        "\n",
        "X_val = df_val['text'].apply(cleaningdata)\n",
        "y_val = df_val['emotions']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 24,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ya7bFEdUUBlc",
        "outputId": "f1250f94-8389-4efa-884f-d3eb4fae2928"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 368 entries, 0 to 367\n",
            "Data columns (total 2 columns):\n",
            " #   Column    Non-Null Count  Dtype \n",
            "---  ------    --------------  ----- \n",
            " 0   text      368 non-null    object\n",
            " 1   emotions  368 non-null    object\n",
            "dtypes: object(2)\n",
            "memory usage: 5.9+ KB\n"
          ]
        }
      ],
      "source": [
        "# data train 80%\n",
        "df_train.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vgEi96MTUGzU",
        "outputId": "157f0871-6770-4b4b-bd3c-bee49f37ee60"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 46 entries, 0 to 45\n",
            "Data columns (total 2 columns):\n",
            " #   Column    Non-Null Count  Dtype \n",
            "---  ------    --------------  ----- \n",
            " 0   text      46 non-null     object\n",
            " 1   emotions  46 non-null     object\n",
            "dtypes: object(2)\n",
            "memory usage: 864.0+ bytes\n"
          ]
        }
      ],
      "source": [
        "# data test 10%\n",
        "df_test.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b2X1DxXPUMEx",
        "outputId": "d8e67372-fc18-4631-c3c8-d1d364e44240"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 47 entries, 0 to 46\n",
            "Data columns (total 2 columns):\n",
            " #   Column    Non-Null Count  Dtype \n",
            "---  ------    --------------  ----- \n",
            " 0   text      47 non-null     object\n",
            " 1   emotions  47 non-null     object\n",
            "dtypes: object(2)\n",
            "memory usage: 880.0+ bytes\n"
          ]
        }
      ],
      "source": [
        "# data validation 10%\n",
        "df_val.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 27,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 809
        },
        "id": "iH8n9-HnSMI6",
        "outputId": "be7cb096-5713-4117-fec2-62e182d8ce52"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "# Visualize classes counts\n",
        "colors = np.array([\"red\", \"yellow\",\"green\"])\n",
        "# train:val:test = 0.8:0.1:0.1\n",
        "unique_1, counts_1 = np.unique(y_train, return_counts=True)\n",
        "plt.bar(unique_1,counts_1, color=colors)\n",
        "plt.title(\"Training data - classes counts\")\n",
        "plt.show()\n",
        "unique_2, counts_2 = np.unique(y_test, return_counts=True)\n",
        "plt.bar(unique_2, counts_2, color=colors)\n",
        "plt.title(\"Testing data - classes counts\")\n",
        "plt.show()\n",
        "unique_3, counts_3 = np.unique(y_val, return_counts=True)\n",
        "plt.bar(unique_3, counts_3, color=colors)\n",
        "plt.title(\"Validation data - classes counts\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 28,
      "metadata": {
        "id": "0DG3Ybm_ShFf"
      },
      "outputs": [],
      "source": [
        "# Encode labels\n",
        "le = LabelEncoder()\n",
        "y_train = le.fit_transform(y_train)\n",
        "y_test = le.fit_transform(y_test)\n",
        "y_val = le.fit_transform(y_val)\n",
        "\n",
        "# let the rehshape function determine a dimension of row data that has only 1 column\n",
        "y_train = y_train.reshape(-1,1)\n",
        "y_test = y_test.reshape(-1,1)\n",
        "y_val = y_val.reshape(-1,1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "M-IwwYcRSkCR",
        "outputId": "76c06b79-1ce1-41a4-d2ab-83e4219ceadb"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Vocabulary size = 1899\n"
          ]
        }
      ],
      "source": [
        "# Tokenize words by adding a predicted new word as a out of vocabulary\n",
        "# return a list after breaking the given string by space ' '\n",
        "vocabSize = 500 # custom value\n",
        "tokenizer = Tokenizer(num_words=vocabSize, split=' ', oov_token=\"<OOV>\")\n",
        "tokenizer.fit_on_texts(pd.concat([X_train, X_test], axis=0))\n",
        "# applying tokenizer on our sample data\n",
        "sequences_train = tokenizer.texts_to_sequences(X_train)\n",
        "sequences_test = tokenizer.texts_to_sequences(X_test)\n",
        "sequences_val = tokenizer.texts_to_sequences(X_val)\n",
        "# making our text uniform\n",
        "X_train = pad_sequences(sequences_train, maxlen=256, truncating='pre')\n",
        "X_test = pad_sequences(sequences_test, maxlen=256, truncating='pre')\n",
        "X_val = pad_sequences(sequences_val, maxlen=256, truncating='pre')\n",
        "\n",
        "# count our vocab\n",
        "vocabSize = len(tokenizer.index_word) + 1\n",
        "print(f\"Vocabulary size = {vocabSize}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Tw69G3iA1PCn"
      },
      "source": [
        "# Model"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Build neural network architecture\n",
        "import tensorflow as tf\n",
        "\n",
        "# Parameters\n",
        "embedding_dim =3 #only 3 labels\n",
        "lstm_dim = 2 #custom value by try and error\n",
        "# tokenizer.num_words = vocabsize + 1\n",
        "\n",
        "# Model Definition with LSTM\n",
        "model_sa = tf.keras.Sequential([\n",
        "    tf.keras.layers.Embedding(tokenizer.num_words, embedding_dim, input_length=X_train.shape[1]),\n",
        "    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(lstm_dim)),\n",
        "    tf.keras.layers.Dropout(0.5),\n",
        "    tf.keras.layers.Dense(3, activation='softmax')\n",
        "])\n",
        "\n",
        "# Print the model summary\n",
        "model_sa.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "26lJlzR74KCe",
        "outputId": "5333e510-eba9-4edc-c16e-5035733096c6"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " embedding (Embedding)       (None, 256, 3)            1500      \n",
            "                                                                 \n",
            " bidirectional (Bidirectiona  (None, 4)                96        \n",
            " l)                                                              \n",
            "                                                                 \n",
            " dropout (Dropout)           (None, 4)                 0         \n",
            "                                                                 \n",
            " dense (Dense)               (None, 3)                 15        \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 1,611\n",
            "Trainable params: 1,611\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZiR_ITTl1S6H"
      },
      "source": [
        "#Compile"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 31,
      "metadata": {
        "id": "nr8-SDZ3e4eK"
      },
      "outputs": [],
      "source": [
        "# Set the training parameters\n",
        "model_sa.compile(loss='sparse_categorical_crossentropy',optimizer=\"adam\",metrics=['accuracy'])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Z5qXNnCx1VRR"
      },
      "source": [
        "# Fit Data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 32,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zENDjDU4fKiQ",
        "outputId": "b1d81288-f578-4829-d3c7-10110e424ecc"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/50\n",
            "12/12 - 6s - loss: 1.0965 - accuracy: 0.3859 - val_loss: 1.0757 - val_accuracy: 0.5652 - 6s/epoch - 524ms/step\n",
            "Epoch 2/50\n",
            "12/12 - 1s - loss: 1.0748 - accuracy: 0.4674 - val_loss: 1.0496 - val_accuracy: 0.4783 - 1s/epoch - 117ms/step\n",
            "Epoch 3/50\n",
            "12/12 - 1s - loss: 1.0608 - accuracy: 0.4185 - val_loss: 1.0258 - val_accuracy: 0.4783 - 1s/epoch - 119ms/step\n",
            "Epoch 4/50\n",
            "12/12 - 1s - loss: 1.0513 - accuracy: 0.4402 - val_loss: 1.0008 - val_accuracy: 0.4783 - 1s/epoch - 118ms/step\n",
            "Epoch 5/50\n",
            "12/12 - 1s - loss: 1.0334 - accuracy: 0.4266 - val_loss: 0.9802 - val_accuracy: 0.4783 - 1s/epoch - 114ms/step\n",
            "Epoch 6/50\n",
            "12/12 - 1s - loss: 1.0249 - accuracy: 0.4484 - val_loss: 0.9595 - val_accuracy: 0.4783 - 1s/epoch - 114ms/step\n",
            "Epoch 7/50\n",
            "12/12 - 1s - loss: 1.0144 - accuracy: 0.4293 - val_loss: 0.9430 - val_accuracy: 0.4783 - 1s/epoch - 116ms/step\n",
            "Epoch 8/50\n",
            "12/12 - 1s - loss: 0.9952 - accuracy: 0.4674 - val_loss: 0.9312 - val_accuracy: 0.4783 - 1s/epoch - 120ms/step\n",
            "Epoch 9/50\n",
            "12/12 - 1s - loss: 1.0131 - accuracy: 0.4457 - val_loss: 0.9260 - val_accuracy: 0.4783 - 1s/epoch - 123ms/step\n",
            "Epoch 10/50\n",
            "12/12 - 1s - loss: 1.0069 - accuracy: 0.4592 - val_loss: 0.9273 - val_accuracy: 0.4783 - 1s/epoch - 114ms/step\n",
            "Epoch 11/50\n",
            "12/12 - 1s - loss: 1.0104 - accuracy: 0.4457 - val_loss: 0.9260 - val_accuracy: 0.4783 - 1s/epoch - 118ms/step\n",
            "Epoch 12/50\n",
            "12/12 - 1s - loss: 1.0061 - accuracy: 0.4239 - val_loss: 0.9222 - val_accuracy: 0.4783 - 1s/epoch - 118ms/step\n",
            "Epoch 13/50\n",
            "12/12 - 1s - loss: 0.9925 - accuracy: 0.4592 - val_loss: 0.9166 - val_accuracy: 0.4783 - 1s/epoch - 117ms/step\n",
            "Epoch 14/50\n",
            "12/12 - 1s - loss: 1.0002 - accuracy: 0.4375 - val_loss: 0.9135 - val_accuracy: 0.4783 - 1s/epoch - 123ms/step\n",
            "Epoch 15/50\n",
            "12/12 - 1s - loss: 0.9715 - accuracy: 0.5217 - val_loss: 0.9031 - val_accuracy: 0.4783 - 1s/epoch - 120ms/step\n",
            "Epoch 16/50\n",
            "12/12 - 2s - loss: 0.9986 - accuracy: 0.4620 - val_loss: 0.9013 - val_accuracy: 0.4783 - 2s/epoch - 127ms/step\n",
            "Epoch 17/50\n",
            "12/12 - 1s - loss: 0.9952 - accuracy: 0.4728 - val_loss: 0.9020 - val_accuracy: 0.4783 - 1s/epoch - 118ms/step\n",
            "Epoch 18/50\n",
            "12/12 - 1s - loss: 0.9784 - accuracy: 0.4565 - val_loss: 0.9028 - val_accuracy: 0.4783 - 1s/epoch - 118ms/step\n",
            "Epoch 19/50\n",
            "12/12 - 1s - loss: 0.9822 - accuracy: 0.4565 - val_loss: 0.9059 - val_accuracy: 0.4565 - 1s/epoch - 121ms/step\n",
            "Epoch 20/50\n",
            "12/12 - 1s - loss: 0.9935 - accuracy: 0.4348 - val_loss: 0.9045 - val_accuracy: 0.4783 - 1s/epoch - 120ms/step\n",
            "Epoch 21/50\n",
            "12/12 - 2s - loss: 0.9994 - accuracy: 0.4647 - val_loss: 0.9080 - val_accuracy: 0.4783 - 2s/epoch - 129ms/step\n",
            "Epoch 22/50\n",
            "12/12 - 1s - loss: 0.9901 - accuracy: 0.4266 - val_loss: 0.9121 - val_accuracy: 0.5435 - 1s/epoch - 122ms/step\n",
            "Epoch 23/50\n",
            "12/12 - 1s - loss: 0.9714 - accuracy: 0.4701 - val_loss: 0.9129 - val_accuracy: 0.4565 - 1s/epoch - 121ms/step\n",
            "Epoch 24/50\n",
            "12/12 - 1s - loss: 0.9608 - accuracy: 0.4755 - val_loss: 0.9055 - val_accuracy: 0.4783 - 1s/epoch - 122ms/step\n",
            "Epoch 25/50\n",
            "12/12 - 1s - loss: 0.9635 - accuracy: 0.4891 - val_loss: 0.9019 - val_accuracy: 0.5000 - 1s/epoch - 120ms/step\n",
            "Epoch 26/50\n",
            "12/12 - 1s - loss: 0.9707 - accuracy: 0.4484 - val_loss: 0.8975 - val_accuracy: 0.5652 - 1s/epoch - 119ms/step\n",
            "Epoch 27/50\n",
            "12/12 - 2s - loss: 0.9652 - accuracy: 0.4810 - val_loss: 0.8967 - val_accuracy: 0.5217 - 2s/epoch - 125ms/step\n",
            "Epoch 28/50\n",
            "12/12 - 1s - loss: 0.9639 - accuracy: 0.4565 - val_loss: 0.8932 - val_accuracy: 0.5652 - 1s/epoch - 115ms/step\n",
            "Epoch 29/50\n",
            "12/12 - 2s - loss: 0.9535 - accuracy: 0.4402 - val_loss: 0.8961 - val_accuracy: 0.5435 - 2s/epoch - 130ms/step\n",
            "Epoch 30/50\n",
            "12/12 - 1s - loss: 0.9527 - accuracy: 0.4266 - val_loss: 0.8975 - val_accuracy: 0.5000 - 1s/epoch - 116ms/step\n",
            "Epoch 31/50\n",
            "12/12 - 1s - loss: 0.9384 - accuracy: 0.4755 - val_loss: 0.9003 - val_accuracy: 0.5000 - 1s/epoch - 115ms/step\n",
            "Epoch 32/50\n",
            "12/12 - 1s - loss: 0.9407 - accuracy: 0.4973 - val_loss: 0.8965 - val_accuracy: 0.4783 - 1s/epoch - 116ms/step\n",
            "Epoch 33/50\n",
            "12/12 - 1s - loss: 0.9409 - accuracy: 0.4810 - val_loss: 0.8919 - val_accuracy: 0.5217 - 1s/epoch - 116ms/step\n",
            "Epoch 34/50\n",
            "12/12 - 1s - loss: 0.9313 - accuracy: 0.5082 - val_loss: 0.8945 - val_accuracy: 0.5000 - 1s/epoch - 120ms/step\n",
            "Epoch 35/50\n",
            "12/12 - 1s - loss: 0.9242 - accuracy: 0.4864 - val_loss: 0.8925 - val_accuracy: 0.5000 - 1s/epoch - 118ms/step\n",
            "Epoch 36/50\n",
            "12/12 - 1s - loss: 0.8835 - accuracy: 0.5652 - val_loss: 0.8869 - val_accuracy: 0.5435 - 1s/epoch - 122ms/step\n",
            "Epoch 37/50\n",
            "12/12 - 2s - loss: 0.8917 - accuracy: 0.5326 - val_loss: 0.8841 - val_accuracy: 0.5435 - 2s/epoch - 127ms/step\n",
            "Epoch 38/50\n",
            "12/12 - 1s - loss: 0.9079 - accuracy: 0.5054 - val_loss: 0.8955 - val_accuracy: 0.5435 - 1s/epoch - 120ms/step\n",
            "Epoch 39/50\n",
            "12/12 - 1s - loss: 0.8862 - accuracy: 0.5652 - val_loss: 0.8851 - val_accuracy: 0.5435 - 1s/epoch - 122ms/step\n",
            "Epoch 40/50\n",
            "12/12 - 1s - loss: 0.8881 - accuracy: 0.5272 - val_loss: 0.8814 - val_accuracy: 0.6087 - 1s/epoch - 119ms/step\n",
            "Epoch 41/50\n",
            "12/12 - 1s - loss: 0.9005 - accuracy: 0.4891 - val_loss: 0.8883 - val_accuracy: 0.5435 - 1s/epoch - 119ms/step\n",
            "Epoch 42/50\n",
            "12/12 - 1s - loss: 0.8729 - accuracy: 0.5897 - val_loss: 0.8915 - val_accuracy: 0.5652 - 1s/epoch - 120ms/step\n",
            "Epoch 43/50\n",
            "12/12 - 1s - loss: 0.8670 - accuracy: 0.5598 - val_loss: 0.8851 - val_accuracy: 0.5870 - 1s/epoch - 121ms/step\n",
            "Epoch 44/50\n",
            "12/12 - 1s - loss: 0.8454 - accuracy: 0.5652 - val_loss: 0.8816 - val_accuracy: 0.5652 - 1s/epoch - 118ms/step\n",
            "Epoch 45/50\n",
            "12/12 - 2s - loss: 0.8579 - accuracy: 0.5489 - val_loss: 0.8838 - val_accuracy: 0.5652 - 2s/epoch - 125ms/step\n",
            "Epoch 46/50\n",
            "12/12 - 2s - loss: 0.8685 - accuracy: 0.5679 - val_loss: 0.8941 - val_accuracy: 0.5870 - 2s/epoch - 136ms/step\n",
            "Epoch 47/50\n",
            "12/12 - 1s - loss: 0.8368 - accuracy: 0.6332 - val_loss: 0.8885 - val_accuracy: 0.5652 - 1s/epoch - 115ms/step\n",
            "Epoch 48/50\n",
            "12/12 - 1s - loss: 0.8407 - accuracy: 0.5842 - val_loss: 0.8871 - val_accuracy: 0.5870 - 1s/epoch - 115ms/step\n",
            "Epoch 49/50\n",
            "12/12 - 1s - loss: 0.8378 - accuracy: 0.6114 - val_loss: 0.8822 - val_accuracy: 0.5652 - 1s/epoch - 117ms/step\n",
            "Epoch 50/50\n",
            "12/12 - 2s - loss: 0.8224 - accuracy: 0.5870 - val_loss: 0.8767 - val_accuracy: 0.5652 - 2s/epoch - 130ms/step\n"
          ]
        }
      ],
      "source": [
        "# Fit the model\n",
        "history_lstm = model_sa.fit(X_train,y_train,epochs=50,validation_data=(X_test, y_test), verbose=2)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kg9_UgFl1cUQ"
      },
      "source": [
        "# Evaluate Model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 33,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gLJ5AVeRfRH5",
        "outputId": "a45b0eea-dd0e-4aa8-baa0-560a0bbd571f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2/2 [==============================] - 0s 23ms/step - loss: 0.7954 - accuracy: 0.7872\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.7954272031784058, 0.7872340679168701]"
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ],
      "source": [
        "# evaluate trained model\n",
        "model_sa.evaluate(X_val, y_val, verbose=1)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HRWEo6Hx1gWj"
      },
      "source": [
        "# Plot Loss"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 34,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 545
        },
        "id": "guH1UiWifYFO",
        "outputId": "263e829e-5987-4352-d495-d95f448e92cc"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "# Plott Loss & Accuracy\n",
        "%matplotlib inline\n",
        "acc = history_lstm.history['accuracy']\n",
        "val_acc = history_lstm.history['val_accuracy']\n",
        "loss = history_lstm.history['loss']\n",
        "val_loss = history_lstm.history['val_loss']\n",
        "\n",
        "epochs = range(len(acc))\n",
        "\n",
        "plt.plot(epochs, acc, 'y', label='Training accuracy')\n",
        "plt.plot(epochs, val_acc, 'b', label='Validation accuracy')\n",
        "plt.title('Training and validation accuracy')\n",
        "plt.legend()\n",
        "plt.figure()\n",
        "\n",
        "plt.plot(epochs, loss, 'y', label='Training Loss')\n",
        "plt.plot(epochs, val_loss, 'b', label='Validation Loss')\n",
        "plt.title('Training and validation loss')\n",
        "plt.legend()\n",
        "\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BodureY51mpX"
      },
      "source": [
        "# Predict Conversation from Tweets"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# X_test for predicting sample\n",
        "predictions = model_sa.predict(X_test, steps = 1, verbose =2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pXRZ-DzRz2qk",
        "outputId": "5487fb25-f9a6-40b4-c568-87723642b1db"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1/1 - 1s - 828ms/epoch - 828ms/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#[negative, neutral, positive]\n",
        "predictions"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yMLIYpW91UM2",
        "outputId": "dad5b748-cdde-45e5-ae30-4d4e88a67d7b"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0.38015002, 0.2749314 , 0.34491855],\n",
              "       [0.39929926, 0.04282904, 0.55787176],\n",
              "       [0.41083384, 0.12687798, 0.4622881 ],\n",
              "       [0.43570068, 0.1849593 , 0.37934008],\n",
              "       [0.42053097, 0.22428954, 0.3551795 ],\n",
              "       [0.4226653 , 0.24538928, 0.33194533],\n",
              "       [0.38001457, 0.07536457, 0.5446209 ],\n",
              "       [0.416769  , 0.26454744, 0.31868356],\n",
              "       [0.45953876, 0.17067377, 0.3697874 ],\n",
              "       [0.37931064, 0.07307929, 0.5476101 ],\n",
              "       [0.4928735 , 0.15588243, 0.35124406],\n",
              "       [0.37596682, 0.04424593, 0.57978725],\n",
              "       [0.41203547, 0.11827704, 0.46968752],\n",
              "       [0.35178918, 0.05380817, 0.59440273],\n",
              "       [0.42085558, 0.19045798, 0.3886864 ],\n",
              "       [0.3394952 , 0.06361208, 0.5968927 ],\n",
              "       [0.43159467, 0.09632389, 0.47208145],\n",
              "       [0.403936  , 0.05493788, 0.5411261 ],\n",
              "       [0.39268982, 0.04027661, 0.5670336 ],\n",
              "       [0.39089617, 0.09919211, 0.5099117 ],\n",
              "       [0.39166424, 0.30854362, 0.29979223],\n",
              "       [0.44686705, 0.24392588, 0.30920705],\n",
              "       [0.44098243, 0.08482403, 0.4741936 ],\n",
              "       [0.4514555 , 0.05844496, 0.49009964],\n",
              "       [0.4139404 , 0.21185134, 0.37420824],\n",
              "       [0.45444483, 0.11791422, 0.42764086],\n",
              "       [0.401096  , 0.29404595, 0.30485806],\n",
              "       [0.45630783, 0.14797685, 0.3957153 ],\n",
              "       [0.3701179 , 0.22176366, 0.40811846],\n",
              "       [0.40988347, 0.24147522, 0.34864128],\n",
              "       [0.4593185 , 0.05943033, 0.4812512 ],\n",
              "       [0.38604805, 0.32810736, 0.28584453],\n",
              "       [0.3804919 , 0.09726334, 0.5222448 ],\n",
              "       [0.43322763, 0.26974988, 0.29702255],\n",
              "       [0.38014215, 0.11792209, 0.5019358 ],\n",
              "       [0.40963605, 0.05415373, 0.53621024],\n",
              "       [0.4135277 , 0.07074141, 0.5157309 ],\n",
              "       [0.41629827, 0.04240832, 0.5412935 ],\n",
              "       [0.4534573 , 0.16736388, 0.37917888],\n",
              "       [0.4246254 , 0.2756708 , 0.2997038 ],\n",
              "       [0.4204773 , 0.11164666, 0.46787602],\n",
              "       [0.39667988, 0.09948379, 0.50383633],\n",
              "       [0.43918467, 0.16124952, 0.39956588],\n",
              "       [0.40773362, 0.29578385, 0.2964825 ],\n",
              "       [0.39689144, 0.05353314, 0.5495754 ],\n",
              "       [0.3862112 , 0.04466189, 0.5691269 ]], dtype=float32)"
            ]
          },
          "metadata": {},
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "np.savetxt('sample.csv', predictions, delimiter=\",\")"
      ],
      "metadata": {
        "id": "1M4be9jR4uNd"
      },
      "execution_count": 52,
      "outputs": []
    }
  ],
  "metadata": {
    "colab": {
      "collapsed_sections": [],
      "name": "CS_02.ipynb",
      "provenance": []
    },
    "gpuClass": "standard",
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
