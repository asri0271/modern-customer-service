{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ymX9pFoyPSXa"
      },
      "source": [
        "#Exploratory Data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "tcI9ixq82y0c"
      },
      "outputs": [],
      "source": [
        "# import all library we need\n",
        "import re\n",
        "import string\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "from tensorflow.keras.utils import to_categorical\n",
        "from tensorflow.keras.preprocessing.text import Tokenizer\n",
        "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
        "\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.callbacks import EarlyStopping\n",
        "from tensorflow.keras.layers import Dense, LSTM, Embedding, Bidirectional"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "O-sPjUDM_x4I",
        "outputId": "330d8cb5-cb42-49df-91ab-0628a06cebee"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ],
      "source": [
        "# mount our personal drive\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "TwGubAufANo0"
      },
      "outputs": [],
      "source": [
        "# Read dataset \n",
        "df = pd.read_csv('/content/drive/MyDrive/customerService/twcs/twcs.csv')\n",
        "\n",
        "# df = pd.read_csv('/content/drive/My Drive/customerService/twcs/twcs.csv') #Aul"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "y6LYt7SfC_Hq",
        "outputId": "cacd3d28-c6a1-4238-8f62-83775384bf83"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   tweet_id   author_id  inbound                      created_at  \\\n",
              "0         1  sprintcare    False  Tue Oct 31 22:10:47 +0000 2017   \n",
              "1         2      115712     True  Tue Oct 31 22:11:45 +0000 2017   \n",
              "2         3      115712     True  Tue Oct 31 22:08:27 +0000 2017   \n",
              "3         4  sprintcare    False  Tue Oct 31 21:54:49 +0000 2017   \n",
              "4         5      115712     True  Tue Oct 31 21:49:35 +0000 2017   \n",
              "\n",
              "                                                text response_tweet_id  \\\n",
              "0  @115712 I understand. I would like to assist y...                 2   \n",
              "1      @sprintcare and how do you propose we do that               NaN   \n",
              "2  @sprintcare I have sent several private messag...                 1   \n",
              "3  @115712 Please send us a Private Message so th...                 3   \n",
              "4                                 @sprintcare I did.                 4   \n",
              "\n",
              "   in_response_to_tweet_id  \n",
              "0                      3.0  \n",
              "1                      1.0  \n",
              "2                      4.0  \n",
              "3                      5.0  \n",
              "4                      6.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1b2c756c-bd17-4b13-ad9f-e7b886ff330b\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>tweet_id</th>\n",
              "      <th>author_id</th>\n",
              "      <th>inbound</th>\n",
              "      <th>created_at</th>\n",
              "      <th>text</th>\n",
              "      <th>response_tweet_id</th>\n",
              "      <th>in_response_to_tweet_id</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>sprintcare</td>\n",
              "      <td>False</td>\n",
              "      <td>Tue Oct 31 22:10:47 +0000 2017</td>\n",
              "      <td>@115712 I understand. I would like to assist y...</td>\n",
              "      <td>2</td>\n",
              "      <td>3.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>115712</td>\n",
              "      <td>True</td>\n",
              "      <td>Tue Oct 31 22:11:45 +0000 2017</td>\n",
              "      <td>@sprintcare and how do you propose we do that</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>115712</td>\n",
              "      <td>True</td>\n",
              "      <td>Tue Oct 31 22:08:27 +0000 2017</td>\n",
              "      <td>@sprintcare I have sent several private messag...</td>\n",
              "      <td>1</td>\n",
              "      <td>4.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>sprintcare</td>\n",
              "      <td>False</td>\n",
              "      <td>Tue Oct 31 21:54:49 +0000 2017</td>\n",
              "      <td>@115712 Please send us a Private Message so th...</td>\n",
              "      <td>3</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>115712</td>\n",
              "      <td>True</td>\n",
              "      <td>Tue Oct 31 21:49:35 +0000 2017</td>\n",
              "      <td>@sprintcare I did.</td>\n",
              "      <td>4</td>\n",
              "      <td>6.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1b2c756c-bd17-4b13-ad9f-e7b886ff330b')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-1b2c756c-bd17-4b13-ad9f-e7b886ff330b button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-1b2c756c-bd17-4b13-ad9f-e7b886ff330b');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ],
      "source": [
        "# Checking at a glance\n",
        "# Tweets have been formed by text from two or more people marked by where the NaN value of response_tweet_id(as end) and NaN value of in_response_to_tweet_id(as start)\n",
        "# tweet_id is identity number of text, author_id is the author of the text,  inbound relate true input into cs false reply from cs, response_tweet_id relate to what text(s) after it, in_response_to_tweet_id relate to what tweet(s) before it.\n",
        "df.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5gK31El-CRIP",
        "outputId": "3c779062-168f-4a6d-8796-405bd5e1b2ac"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    tweet_id   author_id  inbound                      created_at  \\\n",
              "5          6  sprintcare    False  Tue Oct 31 21:46:24 +0000 2017   \n",
              "6          8      115712     True  Tue Oct 31 21:45:10 +0000 2017   \n",
              "7         11  sprintcare    False  Tue Oct 31 22:10:35 +0000 2017   \n",
              "8         12      115713     True  Tue Oct 31 22:04:47 +0000 2017   \n",
              "9         15  sprintcare    False  Tue Oct 31 20:03:31 +0000 2017   \n",
              "10        16      115713     True  Tue Oct 31 20:00:43 +0000 2017   \n",
              "11        17  sprintcare    False  Tue Oct 31 19:59:13 +0000 2017   \n",
              "12        18      115713     True  Tue Oct 31 19:56:01 +0000 2017   \n",
              "13        19  sprintcare    False  Tue Oct 31 22:10:10 +0000 2017   \n",
              "14        20      115715     True  Tue Oct 31 22:03:34 +0000 2017   \n",
              "\n",
              "                                                 text response_tweet_id  \\\n",
              "5   @115712 Can you please send us a private messa...               5,7   \n",
              "6           @sprintcare is the worst customer service            9,6,10   \n",
              "7   @115713 This is saddening to hear. Please shoo...               NaN   \n",
              "8   @sprintcare You gonna magically change your co...          11,13,14   \n",
              "9   @115713 We understand your concerns and we'd l...                12   \n",
              "10  @sprintcare Since I signed up with you....Sinc...                15   \n",
              "11  @115713 H there! We'd definitely like to work ...                16   \n",
              "12  @115714 y’all lie about your “great” connectio...                17   \n",
              "13  @115715 Please send me a private message so th...               NaN   \n",
              "14  @115714 whenever I contact customer support, t...                19   \n",
              "\n",
              "    in_response_to_tweet_id  \n",
              "5                       8.0  \n",
              "6                       NaN  \n",
              "7                      12.0  \n",
              "8                      15.0  \n",
              "9                      16.0  \n",
              "10                     17.0  \n",
              "11                     18.0  \n",
              "12                      NaN  \n",
              "13                     20.0  \n",
              "14                      NaN  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f7390dd1-b2c5-4041-8283-1602ce72f2d9\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>tweet_id</th>\n",
              "      <th>author_id</th>\n",
              "      <th>inbound</th>\n",
              "      <th>created_at</th>\n",
              "      <th>text</th>\n",
              "      <th>response_tweet_id</th>\n",
              "      <th>in_response_to_tweet_id</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>6</td>\n",
              "      <td>sprintcare</td>\n",
              "      <td>False</td>\n",
              "      <td>Tue Oct 31 21:46:24 +0000 2017</td>\n",
              "      <td>@115712 Can you please send us a private messa...</td>\n",
              "      <td>5,7</td>\n",
              "      <td>8.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>8</td>\n",
              "      <td>115712</td>\n",
              "      <td>True</td>\n",
              "      <td>Tue Oct 31 21:45:10 +0000 2017</td>\n",
              "      <td>@sprintcare is the worst customer service</td>\n",
              "      <td>9,6,10</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>11</td>\n",
              "      <td>sprintcare</td>\n",
              "      <td>False</td>\n",
              "      <td>Tue Oct 31 22:10:35 +0000 2017</td>\n",
              "      <td>@115713 This is saddening to hear. Please shoo...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>12.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>12</td>\n",
              "      <td>115713</td>\n",
              "      <td>True</td>\n",
              "      <td>Tue Oct 31 22:04:47 +0000 2017</td>\n",
              "      <td>@sprintcare You gonna magically change your co...</td>\n",
              "      <td>11,13,14</td>\n",
              "      <td>15.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>15</td>\n",
              "      <td>sprintcare</td>\n",
              "      <td>False</td>\n",
              "      <td>Tue Oct 31 20:03:31 +0000 2017</td>\n",
              "      <td>@115713 We understand your concerns and we'd l...</td>\n",
              "      <td>12</td>\n",
              "      <td>16.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>16</td>\n",
              "      <td>115713</td>\n",
              "      <td>True</td>\n",
              "      <td>Tue Oct 31 20:00:43 +0000 2017</td>\n",
              "      <td>@sprintcare Since I signed up with you....Sinc...</td>\n",
              "      <td>15</td>\n",
              "      <td>17.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>17</td>\n",
              "      <td>sprintcare</td>\n",
              "      <td>False</td>\n",
              "      <td>Tue Oct 31 19:59:13 +0000 2017</td>\n",
              "      <td>@115713 H there! We'd definitely like to work ...</td>\n",
              "      <td>16</td>\n",
              "      <td>18.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>18</td>\n",
              "      <td>115713</td>\n",
              "      <td>True</td>\n",
              "      <td>Tue Oct 31 19:56:01 +0000 2017</td>\n",
              "      <td>@115714 y’all lie about your “great” connectio...</td>\n",
              "      <td>17</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>19</td>\n",
              "      <td>sprintcare</td>\n",
              "      <td>False</td>\n",
              "      <td>Tue Oct 31 22:10:10 +0000 2017</td>\n",
              "      <td>@115715 Please send me a private message so th...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>20.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>20</td>\n",
              "      <td>115715</td>\n",
              "      <td>True</td>\n",
              "      <td>Tue Oct 31 22:03:34 +0000 2017</td>\n",
              "      <td>@115714 whenever I contact customer support, t...</td>\n",
              "      <td>19</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f7390dd1-b2c5-4041-8283-1602ce72f2d9')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-f7390dd1-b2c5-4041-8283-1602ce72f2d9 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-f7390dd1-b2c5-4041-8283-1602ce72f2d9');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ],
      "source": [
        "# Checking at a glance\n",
        "df[5:15]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Khdzr-h76HXs",
        "outputId": "c77bfa4a-7f50-43db-df6b-a2578a050f8f"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    tweet_id       author_id  inbound                      created_at  \\\n",
              "15        21    Ask_Spectrum    False  Tue Oct 31 22:14:37 +0000 2017   \n",
              "16        22          115716     True  Tue Oct 31 22:16:48 +0000 2017   \n",
              "17        25    Ask_Spectrum    False  Tue Oct 31 22:18:28 +0000 2017   \n",
              "18        26          115716     True  Tue Oct 31 22:19:56 +0000 2017   \n",
              "19        27    Ask_Spectrum    False  Tue Oct 31 22:21:26 +0000 2017   \n",
              "20        23          115716     True  Tue Oct 31 22:16:05 +0000 2017   \n",
              "21        24          115716     True  Tue Oct 31 22:13:02 +0000 2017   \n",
              "22        28    Ask_Spectrum    False  Tue Oct 31 22:05:37 +0000 2017   \n",
              "23        29          115716     True  Tue Oct 31 22:01:35 +0000 2017   \n",
              "24        30    Ask_Spectrum    False  Tue Oct 31 22:12:09 +0000 2017   \n",
              "25        31          115717     True  Tue Oct 31 22:06:54 +0000 2017   \n",
              "26        32    Ask_Spectrum    False  Tue Oct 31 22:10:08 +0000 2017   \n",
              "27        33          115718     True  Tue Oct 31 22:06:56 +0000 2017   \n",
              "28        34  VerizonSupport    False  Tue Oct 31 22:13:33 +0000 2017   \n",
              "29        35          115719     True  Tue Oct 31 22:49:16 +0000 2017   \n",
              "30        37  VerizonSupport    False  Tue Oct 31 22:52:00 +0000 2017   \n",
              "31        36          115719     True  Tue Oct 31 22:10:46 +0000 2017   \n",
              "32        38  VerizonSupport    False  Tue Oct 31 22:13:30 +0000 2017   \n",
              "33        39          115720     True  Tue Oct 31 22:12:16 +0000 2017   \n",
              "34        40  VerizonSupport    False  Tue Oct 31 22:12:00 +0000 2017   \n",
              "\n",
              "                                                 text response_tweet_id  \\\n",
              "15         @115716 What information is incorrect? ^JK             22,23   \n",
              "16  @Ask_Spectrum Would you like me to email you a...                25   \n",
              "17  @115716 Our department is part of the corporat...                26   \n",
              "18  @Ask_Spectrum I received this from your corpor...                27   \n",
              "19                          @115716 No thank you. ^JK               NaN   \n",
              "20  @Ask_Spectrum The correct way to do it is via ...               NaN   \n",
              "21  @Ask_Spectrum That is INCORRECT information I ...                21   \n",
              "22  @115716 The information pertaining to the acco...                24   \n",
              "23  actually that's a broken link you sent me and ...                28   \n",
              "24  @115717 Hello, My apologies for any frustratio...               NaN   \n",
              "25  Yo @Ask_Spectrum, your customer service reps a...                30   \n",
              "26  @115718 I apologize for the inconvenience. I w...               NaN   \n",
              "27  My picture on @Ask_Spectrum pretty much every ...                32   \n",
              "28  @115719 Help has arrived! We are sorry to see ...                35   \n",
              "29  @VerizonSupport I finally got someone that hel...                37   \n",
              "30  @115719 Awesome! If you ever need us we are ju...               NaN   \n",
              "31  somebody from @VerizonSupport please help meee...                34   \n",
              "32         @115720 Have your friend message us.\\n^ACM               NaN   \n",
              "33  @VerizonSupport My friend is without internet ...                38   \n",
              "34  @115721 Please follow and DM us so that we can...                41   \n",
              "\n",
              "    in_response_to_tweet_id  \n",
              "15                     24.0  \n",
              "16                     21.0  \n",
              "17                     22.0  \n",
              "18                     25.0  \n",
              "19                     26.0  \n",
              "20                     21.0  \n",
              "21                     28.0  \n",
              "22                     29.0  \n",
              "23                      NaN  \n",
              "24                     31.0  \n",
              "25                      NaN  \n",
              "26                     33.0  \n",
              "27                      NaN  \n",
              "28                     36.0  \n",
              "29                     34.0  \n",
              "30                     35.0  \n",
              "31                      NaN  \n",
              "32                     39.0  \n",
              "33                      NaN  \n",
              "34                     42.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-208040bb-4c99-49b2-8782-83c344ee6d04\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>tweet_id</th>\n",
              "      <th>author_id</th>\n",
              "      <th>inbound</th>\n",
              "      <th>created_at</th>\n",
              "      <th>text</th>\n",
              "      <th>response_tweet_id</th>\n",
              "      <th>in_response_to_tweet_id</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>21</td>\n",
              "      <td>Ask_Spectrum</td>\n",
              "      <td>False</td>\n",
              "      <td>Tue Oct 31 22:14:37 +0000 2017</td>\n",
              "      <td>@115716 What information is incorrect? ^JK</td>\n",
              "      <td>22,23</td>\n",
              "      <td>24.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>22</td>\n",
              "      <td>115716</td>\n",
              "      <td>True</td>\n",
              "      <td>Tue Oct 31 22:16:48 +0000 2017</td>\n",
              "      <td>@Ask_Spectrum Would you like me to email you a...</td>\n",
              "      <td>25</td>\n",
              "      <td>21.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>25</td>\n",
              "      <td>Ask_Spectrum</td>\n",
              "      <td>False</td>\n",
              "      <td>Tue Oct 31 22:18:28 +0000 2017</td>\n",
              "      <td>@115716 Our department is part of the corporat...</td>\n",
              "      <td>26</td>\n",
              "      <td>22.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>26</td>\n",
              "      <td>115716</td>\n",
              "      <td>True</td>\n",
              "      <td>Tue Oct 31 22:19:56 +0000 2017</td>\n",
              "      <td>@Ask_Spectrum I received this from your corpor...</td>\n",
              "      <td>27</td>\n",
              "      <td>25.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>27</td>\n",
              "      <td>Ask_Spectrum</td>\n",
              "      <td>False</td>\n",
              "      <td>Tue Oct 31 22:21:26 +0000 2017</td>\n",
              "      <td>@115716 No thank you. ^JK</td>\n",
              "      <td>NaN</td>\n",
              "      <td>26.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>23</td>\n",
              "      <td>115716</td>\n",
              "      <td>True</td>\n",
              "      <td>Tue Oct 31 22:16:05 +0000 2017</td>\n",
              "      <td>@Ask_Spectrum The correct way to do it is via ...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>21.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>24</td>\n",
              "      <td>115716</td>\n",
              "      <td>True</td>\n",
              "      <td>Tue Oct 31 22:13:02 +0000 2017</td>\n",
              "      <td>@Ask_Spectrum That is INCORRECT information I ...</td>\n",
              "      <td>21</td>\n",
              "      <td>28.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>28</td>\n",
              "      <td>Ask_Spectrum</td>\n",
              "      <td>False</td>\n",
              "      <td>Tue Oct 31 22:05:37 +0000 2017</td>\n",
              "      <td>@115716 The information pertaining to the acco...</td>\n",
              "      <td>24</td>\n",
              "      <td>29.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>29</td>\n",
              "      <td>115716</td>\n",
              "      <td>True</td>\n",
              "      <td>Tue Oct 31 22:01:35 +0000 2017</td>\n",
              "      <td>actually that's a broken link you sent me and ...</td>\n",
              "      <td>28</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>30</td>\n",
              "      <td>Ask_Spectrum</td>\n",
              "      <td>False</td>\n",
              "      <td>Tue Oct 31 22:12:09 +0000 2017</td>\n",
              "      <td>@115717 Hello, My apologies for any frustratio...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>31.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>31</td>\n",
              "      <td>115717</td>\n",
              "      <td>True</td>\n",
              "      <td>Tue Oct 31 22:06:54 +0000 2017</td>\n",
              "      <td>Yo @Ask_Spectrum, your customer service reps a...</td>\n",
              "      <td>30</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>32</td>\n",
              "      <td>Ask_Spectrum</td>\n",
              "      <td>False</td>\n",
              "      <td>Tue Oct 31 22:10:08 +0000 2017</td>\n",
              "      <td>@115718 I apologize for the inconvenience. I w...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>33.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>33</td>\n",
              "      <td>115718</td>\n",
              "      <td>True</td>\n",
              "      <td>Tue Oct 31 22:06:56 +0000 2017</td>\n",
              "      <td>My picture on @Ask_Spectrum pretty much every ...</td>\n",
              "      <td>32</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>34</td>\n",
              "      <td>VerizonSupport</td>\n",
              "      <td>False</td>\n",
              "      <td>Tue Oct 31 22:13:33 +0000 2017</td>\n",
              "      <td>@115719 Help has arrived! We are sorry to see ...</td>\n",
              "      <td>35</td>\n",
              "      <td>36.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>35</td>\n",
              "      <td>115719</td>\n",
              "      <td>True</td>\n",
              "      <td>Tue Oct 31 22:49:16 +0000 2017</td>\n",
              "      <td>@VerizonSupport I finally got someone that hel...</td>\n",
              "      <td>37</td>\n",
              "      <td>34.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30</th>\n",
              "      <td>37</td>\n",
              "      <td>VerizonSupport</td>\n",
              "      <td>False</td>\n",
              "      <td>Tue Oct 31 22:52:00 +0000 2017</td>\n",
              "      <td>@115719 Awesome! If you ever need us we are ju...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>35.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31</th>\n",
              "      <td>36</td>\n",
              "      <td>115719</td>\n",
              "      <td>True</td>\n",
              "      <td>Tue Oct 31 22:10:46 +0000 2017</td>\n",
              "      <td>somebody from @VerizonSupport please help meee...</td>\n",
              "      <td>34</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32</th>\n",
              "      <td>38</td>\n",
              "      <td>VerizonSupport</td>\n",
              "      <td>False</td>\n",
              "      <td>Tue Oct 31 22:13:30 +0000 2017</td>\n",
              "      <td>@115720 Have your friend message us.\\n^ACM</td>\n",
              "      <td>NaN</td>\n",
              "      <td>39.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>39</td>\n",
              "      <td>115720</td>\n",
              "      <td>True</td>\n",
              "      <td>Tue Oct 31 22:12:16 +0000 2017</td>\n",
              "      <td>@VerizonSupport My friend is without internet ...</td>\n",
              "      <td>38</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>34</th>\n",
              "      <td>40</td>\n",
              "      <td>VerizonSupport</td>\n",
              "      <td>False</td>\n",
              "      <td>Tue Oct 31 22:12:00 +0000 2017</td>\n",
              "      <td>@115721 Please follow and DM us so that we can...</td>\n",
              "      <td>41</td>\n",
              "      <td>42.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-208040bb-4c99-49b2-8782-83c344ee6d04')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-208040bb-4c99-49b2-8782-83c344ee6d04 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-208040bb-4c99-49b2-8782-83c344ee6d04');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ],
      "source": [
        "# Checking at a glance\n",
        "df[15:35]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bFjNXoZDOanu",
        "outputId": "7263f87c-f906-4c89-c2e3-56fc0ce2cdfb"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 2811774 entries, 0 to 2811773\n",
            "Data columns (total 7 columns):\n",
            " #   Column                   Dtype  \n",
            "---  ------                   -----  \n",
            " 0   tweet_id                 int64  \n",
            " 1   author_id                object \n",
            " 2   inbound                  bool   \n",
            " 3   created_at               object \n",
            " 4   text                     object \n",
            " 5   response_tweet_id        object \n",
            " 6   in_response_to_tweet_id  float64\n",
            "dtypes: bool(1), float64(1), int64(1), object(4)\n",
            "memory usage: 131.4+ MB\n"
          ]
        }
      ],
      "source": [
        "# checking data entries, memory usage, and data type\n",
        "df.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "PpfcQEk8v9sK"
      },
      "outputs": [],
      "source": [
        "#Converting to datetime format\n",
        "df[\"created_at\"]= pd.to_datetime(df[\"created_at\"])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IdzBLcjh3KT2",
        "outputId": "6b0c496c-c5f2-4af5-c3e0-5f518eff88a0"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 2811774 entries, 0 to 2811773\n",
            "Data columns (total 7 columns):\n",
            " #   Column                   Dtype              \n",
            "---  ------                   -----              \n",
            " 0   tweet_id                 int64              \n",
            " 1   author_id                object             \n",
            " 2   inbound                  bool               \n",
            " 3   created_at               datetime64[ns, UTC]\n",
            " 4   text                     object             \n",
            " 5   response_tweet_id        object             \n",
            " 6   in_response_to_tweet_id  float64            \n",
            "dtypes: bool(1), datetime64[ns, UTC](1), float64(1), int64(1), object(3)\n",
            "memory usage: 131.4+ MB\n"
          ]
        }
      ],
      "source": [
        "# checking data entries, memory usage, and data type after formatting\n",
        "df.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QKElamEP3Rp0",
        "outputId": "0ad7908a-3652-4535-b593-240c52a37590"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   tweet_id   author_id  inbound                created_at  \\\n",
              "0         1  sprintcare    False 2017-10-31 22:10:47+00:00   \n",
              "1         2      115712     True 2017-10-31 22:11:45+00:00   \n",
              "2         3      115712     True 2017-10-31 22:08:27+00:00   \n",
              "3         4  sprintcare    False 2017-10-31 21:54:49+00:00   \n",
              "4         5      115712     True 2017-10-31 21:49:35+00:00   \n",
              "\n",
              "                                                text response_tweet_id  \\\n",
              "0  @115712 I understand. I would like to assist y...                 2   \n",
              "1      @sprintcare and how do you propose we do that               NaN   \n",
              "2  @sprintcare I have sent several private messag...                 1   \n",
              "3  @115712 Please send us a Private Message so th...                 3   \n",
              "4                                 @sprintcare I did.                 4   \n",
              "\n",
              "   in_response_to_tweet_id  \n",
              "0                      3.0  \n",
              "1                      1.0  \n",
              "2                      4.0  \n",
              "3                      5.0  \n",
              "4                      6.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3e0bda57-28c8-4030-9b7f-e8206647a2aa\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>tweet_id</th>\n",
              "      <th>author_id</th>\n",
              "      <th>inbound</th>\n",
              "      <th>created_at</th>\n",
              "      <th>text</th>\n",
              "      <th>response_tweet_id</th>\n",
              "      <th>in_response_to_tweet_id</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>sprintcare</td>\n",
              "      <td>False</td>\n",
              "      <td>2017-10-31 22:10:47+00:00</td>\n",
              "      <td>@115712 I understand. I would like to assist y...</td>\n",
              "      <td>2</td>\n",
              "      <td>3.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>115712</td>\n",
              "      <td>True</td>\n",
              "      <td>2017-10-31 22:11:45+00:00</td>\n",
              "      <td>@sprintcare and how do you propose we do that</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>115712</td>\n",
              "      <td>True</td>\n",
              "      <td>2017-10-31 22:08:27+00:00</td>\n",
              "      <td>@sprintcare I have sent several private messag...</td>\n",
              "      <td>1</td>\n",
              "      <td>4.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>sprintcare</td>\n",
              "      <td>False</td>\n",
              "      <td>2017-10-31 21:54:49+00:00</td>\n",
              "      <td>@115712 Please send us a Private Message so th...</td>\n",
              "      <td>3</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>115712</td>\n",
              "      <td>True</td>\n",
              "      <td>2017-10-31 21:49:35+00:00</td>\n",
              "      <td>@sprintcare I did.</td>\n",
              "      <td>4</td>\n",
              "      <td>6.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3e0bda57-28c8-4030-9b7f-e8206647a2aa')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-3e0bda57-28c8-4030-9b7f-e8206647a2aa button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-3e0bda57-28c8-4030-9b7f-e8206647a2aa');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ],
      "source": [
        "# checking formatted created_at as YYYY-MM-DD TIME\n",
        "df.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bdNHcU3MOtD_",
        "outputId": "6e4bef13-c538-437a-d666-5d6f71d2fcc2"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "tweet_id                         0\n",
              "author_id                        0\n",
              "inbound                          0\n",
              "created_at                       0\n",
              "text                             0\n",
              "response_tweet_id          1040629\n",
              "in_response_to_tweet_id     794335\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ],
      "source": [
        "# checking isnull data\n",
        "df.isnull().sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hmwKuD0dd3QT",
        "outputId": "b06d81a1-c585-4b91-a770-859c29c3178a"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ],
      "source": [
        "#check duplicate\n",
        "df.duplicated().sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uReh5pylCvDw",
        "outputId": "4a8d7c80-6e6d-4874-f7f9-8a42ec141c77"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([False,  True])"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ],
      "source": [
        "# list all unique value of inbound\n",
        "np.unique(df[\"inbound\"])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oNPrKqhvOMMU"
      },
      "source": [
        "false means tweet from customer service agent and true tweets from customer"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "mqAlotRgDBB7"
      },
      "outputs": [],
      "source": [
        "ai = np.unique(df[\"author_id\"])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ODzvs3vUD93X",
        "outputId": "2d714126-94b6-4bcf-c7c6-c2274a186a46"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "702777"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ],
      "source": [
        "# checking unique value of author_id\n",
        "np.count_nonzero(ai)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "HeiFBxCD8j9-"
      },
      "outputs": [],
      "source": [
        "# sorted by time\n",
        "df_new = df.sort_values(\"created_at\",ascending=False)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dQKGzFxH8t4X",
        "outputId": "5674046d-b58b-4f3a-ce65-55c339307c00"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        tweet_id   author_id  inbound                created_at  \\\n",
              "524147    589938      259493     True 2017-12-03 23:14:01+00:00   \n",
              "533916    600365  AmazonHelp    False 2017-12-03 23:13:02+00:00   \n",
              "537388    603932  AmazonHelp    False 2017-12-03 23:13:00+00:00   \n",
              "531793    597923  AmazonHelp    False 2017-12-03 23:13:00+00:00   \n",
              "537559    604104   AskPayPal    False 2017-12-03 23:12:50+00:00   \n",
              "\n",
              "                                                     text response_tweet_id  \\\n",
              "524147  @GWRHelp @259492 @259491 I think the confusion...               NaN   \n",
              "533916  @220550 Hi there! Please click the link given ...               NaN   \n",
              "537388  @263540 Je vous prie dans ce cas-là de le sign...               NaN   \n",
              "531793  @261758 When you contacted us, what options/in...               NaN   \n",
              "537559  @263599 Sorry to hear this. If you would like ...               NaN   \n",
              "\n",
              "        in_response_to_tweet_id  \n",
              "524147                 589937.0  \n",
              "533916                 600364.0  \n",
              "537388                 603933.0  \n",
              "531793                 597922.0  \n",
              "537559                 604105.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-43684e49-eab1-4ac9-807f-9fa3812fa764\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>tweet_id</th>\n",
              "      <th>author_id</th>\n",
              "      <th>inbound</th>\n",
              "      <th>created_at</th>\n",
              "      <th>text</th>\n",
              "      <th>response_tweet_id</th>\n",
              "      <th>in_response_to_tweet_id</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>524147</th>\n",
              "      <td>589938</td>\n",
              "      <td>259493</td>\n",
              "      <td>True</td>\n",
              "      <td>2017-12-03 23:14:01+00:00</td>\n",
              "      <td>@GWRHelp @259492 @259491 I think the confusion...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>589937.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>533916</th>\n",
              "      <td>600365</td>\n",
              "      <td>AmazonHelp</td>\n",
              "      <td>False</td>\n",
              "      <td>2017-12-03 23:13:02+00:00</td>\n",
              "      <td>@220550 Hi there! Please click the link given ...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>600364.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>537388</th>\n",
              "      <td>603932</td>\n",
              "      <td>AmazonHelp</td>\n",
              "      <td>False</td>\n",
              "      <td>2017-12-03 23:13:00+00:00</td>\n",
              "      <td>@263540 Je vous prie dans ce cas-là de le sign...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>603933.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>531793</th>\n",
              "      <td>597923</td>\n",
              "      <td>AmazonHelp</td>\n",
              "      <td>False</td>\n",
              "      <td>2017-12-03 23:13:00+00:00</td>\n",
              "      <td>@261758 When you contacted us, what options/in...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>597922.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>537559</th>\n",
              "      <td>604104</td>\n",
              "      <td>AskPayPal</td>\n",
              "      <td>False</td>\n",
              "      <td>2017-12-03 23:12:50+00:00</td>\n",
              "      <td>@263599 Sorry to hear this. If you would like ...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>604105.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-43684e49-eab1-4ac9-807f-9fa3812fa764')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-43684e49-eab1-4ac9-807f-9fa3812fa764 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-43684e49-eab1-4ac9-807f-9fa3812fa764');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ],
      "source": [
        "df_new.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "awl7LeSpZBZi",
        "outputId": "71687b3c-6b0d-42b8-d257-b503a85b3a96"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        tweet_id     author_id  inbound                created_at  \\\n",
              "533916    600365    AmazonHelp    False 2017-12-03 23:13:02+00:00   \n",
              "537388    603932    AmazonHelp    False 2017-12-03 23:13:00+00:00   \n",
              "531793    597923    AmazonHelp    False 2017-12-03 23:13:00+00:00   \n",
              "537559    604104     AskPayPal    False 2017-12-03 23:12:50+00:00   \n",
              "536036    602562   XboxSupport    False 2017-12-03 23:12:44+00:00   \n",
              "...          ...           ...      ...                       ...   \n",
              "535718    602240        262956     True 2017-12-03 23:04:08+00:00   \n",
              "537629    604180    ATVIAssist    False 2017-12-03 23:04:01+00:00   \n",
              "537416    603959    AmazonHelp    False 2017-12-03 23:04:00+00:00   \n",
              "537495    604036  hulu_support    False 2017-12-03 23:03:52+00:00   \n",
              "537391    603935        263540     True 2017-12-03 23:03:51+00:00   \n",
              "\n",
              "                                                     text response_tweet_id  \\\n",
              "533916  @220550 Hi there! Please click the link given ...               NaN   \n",
              "537388  @263540 Je vous prie dans ce cas-là de le sign...               NaN   \n",
              "531793  @261758 When you contacted us, what options/in...               NaN   \n",
              "537559  @263599 Sorry to hear this. If you would like ...               NaN   \n",
              "536036  @263050 According to https://t.co/Qlgzk9sJUt, ...               NaN   \n",
              "...                                                   ...               ...   \n",
              "535718  @AmazonHelp I have done this many times, alrea...               NaN   \n",
              "537629  @263625 Hey there! Please leave all feedback a...               NaN   \n",
              "537416  @263548 If you don't see a membership here: ht...               NaN   \n",
              "537495  @263574 Hey Patrick! We can't make any promise...               NaN   \n",
              "537391  @AmazonHelp Non du tout le transport était par...            603934   \n",
              "\n",
              "        in_response_to_tweet_id  \n",
              "533916                 600364.0  \n",
              "537388                 603933.0  \n",
              "531793                 597922.0  \n",
              "537559                 604105.0  \n",
              "536036                 602560.0  \n",
              "...                         ...  \n",
              "535718                 602239.0  \n",
              "537629                 604181.0  \n",
              "537416                 603960.0  \n",
              "537495                 604037.0  \n",
              "537391                 603936.0  \n",
              "\n",
              "[77 rows x 7 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f84997bd-864b-482d-bc5b-207715190e8b\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>tweet_id</th>\n",
              "      <th>author_id</th>\n",
              "      <th>inbound</th>\n",
              "      <th>created_at</th>\n",
              "      <th>text</th>\n",
              "      <th>response_tweet_id</th>\n",
              "      <th>in_response_to_tweet_id</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>533916</th>\n",
              "      <td>600365</td>\n",
              "      <td>AmazonHelp</td>\n",
              "      <td>False</td>\n",
              "      <td>2017-12-03 23:13:02+00:00</td>\n",
              "      <td>@220550 Hi there! Please click the link given ...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>600364.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>537388</th>\n",
              "      <td>603932</td>\n",
              "      <td>AmazonHelp</td>\n",
              "      <td>False</td>\n",
              "      <td>2017-12-03 23:13:00+00:00</td>\n",
              "      <td>@263540 Je vous prie dans ce cas-là de le sign...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>603933.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>531793</th>\n",
              "      <td>597923</td>\n",
              "      <td>AmazonHelp</td>\n",
              "      <td>False</td>\n",
              "      <td>2017-12-03 23:13:00+00:00</td>\n",
              "      <td>@261758 When you contacted us, what options/in...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>597922.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>537559</th>\n",
              "      <td>604104</td>\n",
              "      <td>AskPayPal</td>\n",
              "      <td>False</td>\n",
              "      <td>2017-12-03 23:12:50+00:00</td>\n",
              "      <td>@263599 Sorry to hear this. If you would like ...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>604105.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>536036</th>\n",
              "      <td>602562</td>\n",
              "      <td>XboxSupport</td>\n",
              "      <td>False</td>\n",
              "      <td>2017-12-03 23:12:44+00:00</td>\n",
              "      <td>@263050 According to https://t.co/Qlgzk9sJUt, ...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>602560.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>535718</th>\n",
              "      <td>602240</td>\n",
              "      <td>262956</td>\n",
              "      <td>True</td>\n",
              "      <td>2017-12-03 23:04:08+00:00</td>\n",
              "      <td>@AmazonHelp I have done this many times, alrea...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>602239.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>537629</th>\n",
              "      <td>604180</td>\n",
              "      <td>ATVIAssist</td>\n",
              "      <td>False</td>\n",
              "      <td>2017-12-03 23:04:01+00:00</td>\n",
              "      <td>@263625 Hey there! Please leave all feedback a...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>604181.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>537416</th>\n",
              "      <td>603959</td>\n",
              "      <td>AmazonHelp</td>\n",
              "      <td>False</td>\n",
              "      <td>2017-12-03 23:04:00+00:00</td>\n",
              "      <td>@263548 If you don't see a membership here: ht...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>603960.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>537495</th>\n",
              "      <td>604036</td>\n",
              "      <td>hulu_support</td>\n",
              "      <td>False</td>\n",
              "      <td>2017-12-03 23:03:52+00:00</td>\n",
              "      <td>@263574 Hey Patrick! We can't make any promise...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>604037.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>537391</th>\n",
              "      <td>603935</td>\n",
              "      <td>263540</td>\n",
              "      <td>True</td>\n",
              "      <td>2017-12-03 23:03:51+00:00</td>\n",
              "      <td>@AmazonHelp Non du tout le transport était par...</td>\n",
              "      <td>603934</td>\n",
              "      <td>603936.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>77 rows × 7 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f84997bd-864b-482d-bc5b-207715190e8b')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-f84997bd-864b-482d-bc5b-207715190e8b button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-f84997bd-864b-482d-bc5b-207715190e8b');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ],
      "source": [
        "df_new[1:78]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xpQdL8p-kVWj"
      },
      "source": [
        "#Data Preprocessing"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6jTfKYzGTpit",
        "outputId": "b5467274-c65d-41c1-80c8-2438f0d38eb1"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Empty DataFrame\n",
              "Columns: [tweet_id, author_id, inbound, created_at, text, response_tweet_id, in_response_to_tweet_id]\n",
              "Index: []"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b5f2499c-052e-465e-8faf-0257276400b0\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>tweet_id</th>\n",
              "      <th>author_id</th>\n",
              "      <th>inbound</th>\n",
              "      <th>created_at</th>\n",
              "      <th>text</th>\n",
              "      <th>response_tweet_id</th>\n",
              "      <th>in_response_to_tweet_id</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b5f2499c-052e-465e-8faf-0257276400b0')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-b5f2499c-052e-465e-8faf-0257276400b0 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-b5f2499c-052e-465e-8faf-0257276400b0');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ],
      "source": [
        "# What author_id we want to consider their conversation from sample.csv \n",
        "only_105860 = df_new[df_new[\"author_id\"].isin([\"105860\"])]\n",
        "\n",
        "only_105860.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Pitysi-mwfkw",
        "outputId": "aab76884-4454-4580-ec89-eb7084d95816"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         tweet_id author_id  inbound                created_at  \\\n",
              "524147     589938    259493     True 2017-12-03 23:14:01+00:00   \n",
              "2064927   2224070    259493     True 2017-11-10 13:13:20+00:00   \n",
              "1876542   2032563    259493     True 2017-11-07 15:56:37+00:00   \n",
              "1876544   2032564    259493     True 2017-11-07 15:30:44+00:00   \n",
              "1812757   1968331    259493     True 2017-10-18 18:04:35+00:00   \n",
              "\n",
              "                                                      text response_tweet_id  \\\n",
              "524147   @GWRHelp @259492 @259491 I think the confusion...               NaN   \n",
              "2064927  @115793 @SW_Help Approaching sunset at Clapham...   2224069,2224071   \n",
              "1876542  @SW_Help OK thanks. And will I be ok using my ...           2032565   \n",
              "1876544  @SW_Help Hi, could you confirm whereabouts in ...           2032562   \n",
              "1812757  @SW_Help @330583 The 1759 you were waiting for...               NaN   \n",
              "\n",
              "         in_response_to_tweet_id  \n",
              "524147                  589937.0  \n",
              "2064927                      NaN  \n",
              "1876542                2032562.0  \n",
              "1876544                      NaN  \n",
              "1812757                1968330.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-04fbc5c3-4bde-4016-9ac6-32b889b3abbf\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>tweet_id</th>\n",
              "      <th>author_id</th>\n",
              "      <th>inbound</th>\n",
              "      <th>created_at</th>\n",
              "      <th>text</th>\n",
              "      <th>response_tweet_id</th>\n",
              "      <th>in_response_to_tweet_id</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>524147</th>\n",
              "      <td>589938</td>\n",
              "      <td>259493</td>\n",
              "      <td>True</td>\n",
              "      <td>2017-12-03 23:14:01+00:00</td>\n",
              "      <td>@GWRHelp @259492 @259491 I think the confusion...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>589937.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2064927</th>\n",
              "      <td>2224070</td>\n",
              "      <td>259493</td>\n",
              "      <td>True</td>\n",
              "      <td>2017-11-10 13:13:20+00:00</td>\n",
              "      <td>@115793 @SW_Help Approaching sunset at Clapham...</td>\n",
              "      <td>2224069,2224071</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1876542</th>\n",
              "      <td>2032563</td>\n",
              "      <td>259493</td>\n",
              "      <td>True</td>\n",
              "      <td>2017-11-07 15:56:37+00:00</td>\n",
              "      <td>@SW_Help OK thanks. And will I be ok using my ...</td>\n",
              "      <td>2032565</td>\n",
              "      <td>2032562.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1876544</th>\n",
              "      <td>2032564</td>\n",
              "      <td>259493</td>\n",
              "      <td>True</td>\n",
              "      <td>2017-11-07 15:30:44+00:00</td>\n",
              "      <td>@SW_Help Hi, could you confirm whereabouts in ...</td>\n",
              "      <td>2032562</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1812757</th>\n",
              "      <td>1968331</td>\n",
              "      <td>259493</td>\n",
              "      <td>True</td>\n",
              "      <td>2017-10-18 18:04:35+00:00</td>\n",
              "      <td>@SW_Help @330583 The 1759 you were waiting for...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1968330.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-04fbc5c3-4bde-4016-9ac6-32b889b3abbf')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-04fbc5c3-4bde-4016-9ac6-32b889b3abbf button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-04fbc5c3-4bde-4016-9ac6-32b889b3abbf');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ],
      "source": [
        "# random from dataset != with sample.csv\n",
        "only_259493 = df_new[df_new[\"author_id\"].isin([\"259493\"])]\n",
        "\n",
        "only_259493.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hGQhVhU-AQU9",
        "outputId": "2565875d-9ca8-4efb-a6bc-12f75b62fa8d"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    tweet_id author_id  inbound                      created_at  \\\n",
              "89    119331    105860     True  Wed Oct 11 13:47:14 +0000 2017   \n",
              "\n",
              "                                                 text response_tweet_id  \\\n",
              "89  They reschedule my shit for tomorrow https://t...            119330   \n",
              "\n",
              "    in_response_to_tweet_id  \n",
              "89                      NaN  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a6328f7b-318b-4f60-9356-c885b81bfe2f\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>tweet_id</th>\n",
              "      <th>author_id</th>\n",
              "      <th>inbound</th>\n",
              "      <th>created_at</th>\n",
              "      <th>text</th>\n",
              "      <th>response_tweet_id</th>\n",
              "      <th>in_response_to_tweet_id</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>89</th>\n",
              "      <td>119331</td>\n",
              "      <td>105860</td>\n",
              "      <td>True</td>\n",
              "      <td>Wed Oct 11 13:47:14 +0000 2017</td>\n",
              "      <td>They reschedule my shit for tomorrow https://t...</td>\n",
              "      <td>119330</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a6328f7b-318b-4f60-9356-c885b81bfe2f')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a6328f7b-318b-4f60-9356-c885b81bfe2f button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a6328f7b-318b-4f60-9356-c885b81bfe2f');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ],
      "source": [
        "#firstly, upload data to file\n",
        "sample = pd.read_csv('/content/drive/MyDrive/customerService/sample.csv')\n",
        "only_105860_sample = sample[sample[\"author_id\"].isin([\"105860\"])]\n",
        "only_105860_sample"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "7b6PBJcwJj3v"
      },
      "outputs": [],
      "source": [
        "# data preprocessing\n",
        "def cleaningdata(text):\n",
        "    text = re.sub(r'[^a-zA-Z]','',text)#regular expression [^a-zA-Z] means any character that IS NOT a-z OR A-Z will be removed\n",
        "    text = text.lower() # making text in lower formatted\n",
        "    return text    "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "lteXM-BMOaCI"
      },
      "outputs": [],
      "source": [
        "# Read dataset & Preprocess text\n",
        "df_train = pd.read_csv('/content/drive/MyDrive/customerService/train_data.csv', sep=',')\n",
        "df_val = pd.read_csv('/content/drive/MyDrive/customerService/val_data.csv', sep=',')\n",
        "df_test = pd.read_csv('/content/drive/MyDrive/customerService/test_data.csv', sep=',')\n",
        "# from challenge NLP we convert to sentiment analysis(positive,nehative and neutral)\n",
        "df_train['emotions'] = df_train['emotions'].replace(['joy','love'],'positive').replace(['anger','fear','sadness'],'negative').replace(['surprise'],'neutral')\n",
        "df_val['emotions'] = df_val['emotions'].replace(['joy','love'],'positive').replace(['anger','fear','sadness'],'negative').replace(['surprise'],'neutral')\n",
        "df_test['emotions'] = df_test['emotions'].replace(['joy','love'],'positive').replace(['anger','fear','sadness'],'negative').replace(['surprise'],'neutral')\n",
        "# applying alphabetical(a-Z) function to our data target\n",
        "X_train = df_train['text'].apply(cleaningdata)\n",
        "y_train = df_train['emotions']\n",
        "\n",
        "X_test = df_test['text'].apply(cleaningdata)\n",
        "y_test = df_test['emotions']\n",
        "\n",
        "X_val = df_val['text'].apply(cleaningdata)\n",
        "y_val = df_val['emotions']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ya7bFEdUUBlc",
        "outputId": "8ef92be1-b05c-4612-b58b-66d3b2b509e1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 368 entries, 0 to 367\n",
            "Data columns (total 2 columns):\n",
            " #   Column    Non-Null Count  Dtype \n",
            "---  ------    --------------  ----- \n",
            " 0   text      368 non-null    object\n",
            " 1   emotions  368 non-null    object\n",
            "dtypes: object(2)\n",
            "memory usage: 5.9+ KB\n"
          ]
        }
      ],
      "source": [
        "# data train 80%\n",
        "df_train.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vgEi96MTUGzU",
        "outputId": "cbaf7abc-1ebf-4a8d-abca-c5dea76def1c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 46 entries, 0 to 45\n",
            "Data columns (total 2 columns):\n",
            " #   Column    Non-Null Count  Dtype \n",
            "---  ------    --------------  ----- \n",
            " 0   text      46 non-null     object\n",
            " 1   emotions  46 non-null     object\n",
            "dtypes: object(2)\n",
            "memory usage: 864.0+ bytes\n"
          ]
        }
      ],
      "source": [
        "# data test 10%\n",
        "df_test.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b2X1DxXPUMEx",
        "outputId": "b0ab4609-ffc2-46dd-858a-1152b7d4190e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 47 entries, 0 to 46\n",
            "Data columns (total 2 columns):\n",
            " #   Column    Non-Null Count  Dtype \n",
            "---  ------    --------------  ----- \n",
            " 0   text      47 non-null     object\n",
            " 1   emotions  47 non-null     object\n",
            "dtypes: object(2)\n",
            "memory usage: 880.0+ bytes\n"
          ]
        }
      ],
      "source": [
        "# data validation 10%\n",
        "df_val.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iH8n9-HnSMI6",
        "outputId": "1a958508-d391-4b94-d472-87196f508e01"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "# Visualize classes counts\n",
        "colors = np.array([\"red\", \"yellow\",\"green\"])\n",
        "# train:val:test = 0.8:0.1:0.1\n",
        "unique_1, counts_1 = np.unique(y_train, return_counts=True)\n",
        "plt.bar(unique_1,counts_1, color=colors)\n",
        "plt.title(\"Training data - classes counts\")\n",
        "plt.show()\n",
        "unique_2, counts_2 = np.unique(y_test, return_counts=True)\n",
        "plt.bar(unique_2, counts_2, color=colors)\n",
        "plt.title(\"Testing data - classes counts\")\n",
        "plt.show()\n",
        "unique_3, counts_3 = np.unique(y_val, return_counts=True)\n",
        "plt.bar(unique_3, counts_3, color=colors)\n",
        "plt.title(\"Validation data - classes counts\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "0DG3Ybm_ShFf"
      },
      "outputs": [],
      "source": [
        "# Encode labels\n",
        "le = LabelEncoder()\n",
        "y_train = le.fit_transform(y_train)\n",
        "y_test = le.fit_transform(y_test)\n",
        "y_val = le.fit_transform(y_val)\n",
        "\n",
        "# let the rehshape function determine a dimension of row data that has only 1 column\n",
        "y_train = y_train.reshape(-1,1)\n",
        "y_test = y_test.reshape(-1,1)\n",
        "y_val = y_val.reshape(-1,1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "M-IwwYcRSkCR",
        "outputId": "de022911-833c-4bd1-bcd3-155af48162d3"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Vocabulary size = 408\n"
          ]
        }
      ],
      "source": [
        "# Tokenize words by adding a predicted new word as a out of vocabulary\n",
        "# return a list after breaking the given string by space ' '\n",
        "vocabSize = 500 # custom value\n",
        "tokenizer = Tokenizer(num_words=vocabSize, split=' ', oov_token=\"<OOV>\")\n",
        "tokenizer.fit_on_texts(pd.concat([X_train, X_test], axis=0))\n",
        "# applying tokenizer on our sample data\n",
        "sequences_train = tokenizer.texts_to_sequences(X_train)\n",
        "sequences_test = tokenizer.texts_to_sequences(X_test)\n",
        "sequences_val = tokenizer.texts_to_sequences(X_val)\n",
        "# making our text uniform\n",
        "X_train = pad_sequences(sequences_train, maxlen=256, padding='post')\n",
        "X_test = pad_sequences(sequences_test, maxlen=256, padding='post')\n",
        "X_val = pad_sequences(sequences_val, maxlen=256, padding='post')\n",
        "\n",
        "# count our vocab\n",
        "vocabSize = len(tokenizer.index_word) + 1\n",
        "print(f\"Vocabulary size = {vocabSize}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Tw69G3iA1PCn"
      },
      "source": [
        "# Model"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Build neural network architecture\n",
        "import tensorflow as tf\n",
        "\n",
        "# Parameters\n",
        "embedding_dim =3 #only 3 labels\n",
        "lstm_dim = 2 #custom value by try and error\n",
        "# tokenizer.num_words = vocabsize + 1\n",
        "\n",
        "# Model Definition with LSTM\n",
        "model_sa = tf.keras.Sequential([\n",
        "    tf.keras.layers.Embedding(tokenizer.num_words, embedding_dim, input_length=X_train.shape[1]),\n",
        "    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(lstm_dim)),\n",
        "    tf.keras.layers.Dropout(0.5),\n",
        "    tf.keras.layers.Dense(3, activation='softmax')\n",
        "])\n",
        "\n",
        "# Print the model summary\n",
        "model_sa.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "26lJlzR74KCe",
        "outputId": "7e95810e-3885-4d80-c09b-e30e1a6c25d6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential_17\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " embedding_17 (Embedding)    (None, 256, 3)            1500      \n",
            "                                                                 \n",
            " bidirectional_17 (Bidirecti  (None, 4)                96        \n",
            " onal)                                                           \n",
            "                                                                 \n",
            " dropout_32 (Dropout)        (None, 4)                 0         \n",
            "                                                                 \n",
            " dense_33 (Dense)            (None, 3)                 15        \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 1,611\n",
            "Trainable params: 1,611\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZiR_ITTl1S6H"
      },
      "source": [
        "#Compile"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "nr8-SDZ3e4eK"
      },
      "outputs": [],
      "source": [
        "# Set the training parameters\n",
        "model_sa.compile(loss='sparse_categorical_crossentropy',optimizer=\"adam\",metrics=['accuracy'])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Z5qXNnCx1VRR"
      },
      "source": [
        "# Fit Data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zENDjDU4fKiQ",
        "outputId": "1a326ac7-a4f0-476f-f5ce-828709805eb2"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/50\n",
            "12/12 - 9s - loss: 1.0966 - accuracy: 0.3967 - val_loss: 1.0891 - val_accuracy: 0.5435 - 9s/epoch - 726ms/step\n",
            "Epoch 2/50\n",
            "12/12 - 2s - loss: 1.0878 - accuracy: 0.4674 - val_loss: 1.0774 - val_accuracy: 0.4783 - 2s/epoch - 125ms/step\n",
            "Epoch 3/50\n",
            "12/12 - 2s - loss: 1.0794 - accuracy: 0.4538 - val_loss: 1.0658 - val_accuracy: 0.4783 - 2s/epoch - 125ms/step\n",
            "Epoch 4/50\n",
            "12/12 - 2s - loss: 1.0725 - accuracy: 0.4538 - val_loss: 1.0522 - val_accuracy: 0.4783 - 2s/epoch - 127ms/step\n",
            "Epoch 5/50\n",
            "12/12 - 2s - loss: 1.0621 - accuracy: 0.4402 - val_loss: 1.0375 - val_accuracy: 0.4783 - 2s/epoch - 126ms/step\n",
            "Epoch 6/50\n",
            "12/12 - 2s - loss: 1.0540 - accuracy: 0.4103 - val_loss: 1.0234 - val_accuracy: 0.4783 - 2s/epoch - 128ms/step\n",
            "Epoch 7/50\n",
            "12/12 - 2s - loss: 1.0460 - accuracy: 0.4321 - val_loss: 1.0087 - val_accuracy: 0.4783 - 2s/epoch - 127ms/step\n",
            "Epoch 8/50\n",
            "12/12 - 2s - loss: 1.0354 - accuracy: 0.4429 - val_loss: 0.9951 - val_accuracy: 0.4783 - 2s/epoch - 128ms/step\n",
            "Epoch 9/50\n",
            "12/12 - 2s - loss: 1.0248 - accuracy: 0.4592 - val_loss: 0.9805 - val_accuracy: 0.4783 - 2s/epoch - 125ms/step\n",
            "Epoch 10/50\n",
            "12/12 - 2s - loss: 1.0156 - accuracy: 0.4538 - val_loss: 0.9719 - val_accuracy: 0.4783 - 2s/epoch - 128ms/step\n",
            "Epoch 11/50\n",
            "12/12 - 2s - loss: 1.0288 - accuracy: 0.4185 - val_loss: 0.9638 - val_accuracy: 0.4783 - 2s/epoch - 128ms/step\n",
            "Epoch 12/50\n",
            "12/12 - 2s - loss: 1.0160 - accuracy: 0.4239 - val_loss: 0.9580 - val_accuracy: 0.4783 - 2s/epoch - 129ms/step\n",
            "Epoch 13/50\n",
            "12/12 - 2s - loss: 1.0194 - accuracy: 0.4565 - val_loss: 0.9525 - val_accuracy: 0.4783 - 2s/epoch - 128ms/step\n",
            "Epoch 14/50\n",
            "12/12 - 2s - loss: 1.0087 - accuracy: 0.5000 - val_loss: 0.9494 - val_accuracy: 0.4783 - 2s/epoch - 130ms/step\n",
            "Epoch 15/50\n",
            "12/12 - 2s - loss: 0.9988 - accuracy: 0.4538 - val_loss: 0.9435 - val_accuracy: 0.4783 - 2s/epoch - 130ms/step\n",
            "Epoch 16/50\n",
            "12/12 - 2s - loss: 0.9956 - accuracy: 0.4565 - val_loss: 0.9389 - val_accuracy: 0.4783 - 2s/epoch - 128ms/step\n",
            "Epoch 17/50\n",
            "12/12 - 2s - loss: 1.0064 - accuracy: 0.4402 - val_loss: 0.9358 - val_accuracy: 0.4783 - 2s/epoch - 129ms/step\n",
            "Epoch 18/50\n",
            "12/12 - 2s - loss: 0.9916 - accuracy: 0.4728 - val_loss: 0.9325 - val_accuracy: 0.4783 - 2s/epoch - 128ms/step\n",
            "Epoch 19/50\n",
            "12/12 - 2s - loss: 0.9942 - accuracy: 0.4293 - val_loss: 0.9290 - val_accuracy: 0.4783 - 2s/epoch - 125ms/step\n",
            "Epoch 20/50\n",
            "12/12 - 2s - loss: 0.9833 - accuracy: 0.4592 - val_loss: 0.9267 - val_accuracy: 0.4783 - 2s/epoch - 128ms/step\n",
            "Epoch 21/50\n",
            "12/12 - 2s - loss: 0.9918 - accuracy: 0.4565 - val_loss: 0.9253 - val_accuracy: 0.4783 - 2s/epoch - 127ms/step\n",
            "Epoch 22/50\n",
            "12/12 - 2s - loss: 0.9674 - accuracy: 0.4946 - val_loss: 0.9204 - val_accuracy: 0.4783 - 2s/epoch - 128ms/step\n",
            "Epoch 23/50\n",
            "12/12 - 2s - loss: 0.9763 - accuracy: 0.4701 - val_loss: 0.9174 - val_accuracy: 0.4783 - 2s/epoch - 129ms/step\n",
            "Epoch 24/50\n",
            "12/12 - 2s - loss: 0.9595 - accuracy: 0.5516 - val_loss: 0.9129 - val_accuracy: 0.4783 - 2s/epoch - 134ms/step\n",
            "Epoch 25/50\n",
            "12/12 - 2s - loss: 0.9788 - accuracy: 0.4701 - val_loss: 0.9122 - val_accuracy: 0.4783 - 2s/epoch - 128ms/step\n",
            "Epoch 26/50\n",
            "12/12 - 2s - loss: 0.9623 - accuracy: 0.5543 - val_loss: 0.9116 - val_accuracy: 0.4783 - 2s/epoch - 128ms/step\n",
            "Epoch 27/50\n",
            "12/12 - 2s - loss: 0.9544 - accuracy: 0.5652 - val_loss: 0.9109 - val_accuracy: 0.4783 - 2s/epoch - 129ms/step\n",
            "Epoch 28/50\n",
            "12/12 - 2s - loss: 0.9676 - accuracy: 0.5598 - val_loss: 0.9087 - val_accuracy: 0.4783 - 2s/epoch - 127ms/step\n",
            "Epoch 29/50\n",
            "12/12 - 2s - loss: 0.9520 - accuracy: 0.5543 - val_loss: 0.9062 - val_accuracy: 0.4783 - 2s/epoch - 127ms/step\n",
            "Epoch 30/50\n",
            "12/12 - 2s - loss: 0.9420 - accuracy: 0.5326 - val_loss: 0.9044 - val_accuracy: 0.4783 - 2s/epoch - 131ms/step\n",
            "Epoch 31/50\n",
            "12/12 - 2s - loss: 0.9371 - accuracy: 0.5435 - val_loss: 0.9054 - val_accuracy: 0.4783 - 2s/epoch - 133ms/step\n",
            "Epoch 32/50\n",
            "12/12 - 2s - loss: 0.9251 - accuracy: 0.6141 - val_loss: 0.9024 - val_accuracy: 0.4783 - 2s/epoch - 131ms/step\n",
            "Epoch 33/50\n",
            "12/12 - 2s - loss: 0.9268 - accuracy: 0.5870 - val_loss: 0.9047 - val_accuracy: 0.4783 - 2s/epoch - 127ms/step\n",
            "Epoch 34/50\n",
            "12/12 - 2s - loss: 0.9245 - accuracy: 0.6495 - val_loss: 0.9033 - val_accuracy: 0.4783 - 2s/epoch - 131ms/step\n",
            "Epoch 35/50\n",
            "12/12 - 2s - loss: 0.9013 - accuracy: 0.6304 - val_loss: 0.8987 - val_accuracy: 0.4783 - 2s/epoch - 129ms/step\n",
            "Epoch 36/50\n",
            "12/12 - 2s - loss: 0.8936 - accuracy: 0.6141 - val_loss: 0.8986 - val_accuracy: 0.4783 - 2s/epoch - 133ms/step\n",
            "Epoch 37/50\n",
            "12/12 - 2s - loss: 0.8774 - accuracy: 0.6603 - val_loss: 0.9002 - val_accuracy: 0.4783 - 2s/epoch - 126ms/step\n",
            "Epoch 38/50\n",
            "12/12 - 2s - loss: 0.8702 - accuracy: 0.6766 - val_loss: 0.8996 - val_accuracy: 0.4783 - 2s/epoch - 131ms/step\n",
            "Epoch 39/50\n",
            "12/12 - 2s - loss: 0.8499 - accuracy: 0.7310 - val_loss: 0.8992 - val_accuracy: 0.4783 - 2s/epoch - 128ms/step\n",
            "Epoch 40/50\n",
            "12/12 - 2s - loss: 0.8440 - accuracy: 0.7418 - val_loss: 0.8947 - val_accuracy: 0.4783 - 2s/epoch - 130ms/step\n",
            "Epoch 41/50\n",
            "12/12 - 2s - loss: 0.8422 - accuracy: 0.7310 - val_loss: 0.8956 - val_accuracy: 0.4783 - 2s/epoch - 128ms/step\n",
            "Epoch 42/50\n",
            "12/12 - 2s - loss: 0.8332 - accuracy: 0.7391 - val_loss: 0.8960 - val_accuracy: 0.4783 - 2s/epoch - 130ms/step\n",
            "Epoch 43/50\n",
            "12/12 - 2s - loss: 0.8041 - accuracy: 0.7690 - val_loss: 0.8946 - val_accuracy: 0.4783 - 2s/epoch - 127ms/step\n",
            "Epoch 44/50\n",
            "12/12 - 2s - loss: 0.8048 - accuracy: 0.7446 - val_loss: 0.8939 - val_accuracy: 0.4783 - 2s/epoch - 130ms/step\n",
            "Epoch 45/50\n",
            "12/12 - 2s - loss: 0.8075 - accuracy: 0.7554 - val_loss: 0.8930 - val_accuracy: 0.4783 - 2s/epoch - 126ms/step\n",
            "Epoch 46/50\n",
            "12/12 - 2s - loss: 0.7913 - accuracy: 0.7582 - val_loss: 0.8952 - val_accuracy: 0.4783 - 2s/epoch - 127ms/step\n",
            "Epoch 47/50\n",
            "12/12 - 2s - loss: 0.7743 - accuracy: 0.7473 - val_loss: 0.8925 - val_accuracy: 0.4783 - 2s/epoch - 128ms/step\n",
            "Epoch 48/50\n",
            "12/12 - 2s - loss: 0.7565 - accuracy: 0.7636 - val_loss: 0.8912 - val_accuracy: 0.4783 - 2s/epoch - 127ms/step\n",
            "Epoch 49/50\n",
            "12/12 - 2s - loss: 0.7422 - accuracy: 0.7609 - val_loss: 0.8906 - val_accuracy: 0.4783 - 2s/epoch - 127ms/step\n",
            "Epoch 50/50\n",
            "12/12 - 2s - loss: 0.7200 - accuracy: 0.7908 - val_loss: 0.8906 - val_accuracy: 0.4783 - 2s/epoch - 128ms/step\n"
          ]
        }
      ],
      "source": [
        "# Fit the model\n",
        "history_lstm = model_sa.fit(X_train,y_train,epochs=50,validation_data=(X_test, y_test), verbose=2)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kg9_UgFl1cUQ"
      },
      "source": [
        "# Evaluate Model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gLJ5AVeRfRH5",
        "outputId": "ae6b964e-402f-4356-a013-6bdc79e40fca"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2/2 [==============================] - 0s 24ms/step - loss: 0.8332 - accuracy: 0.5745\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.833243191242218, 0.5744680762290955]"
            ]
          },
          "metadata": {},
          "execution_count": 63
        }
      ],
      "source": [
        "# evaluate trained model\n",
        "model_sa.evaluate(X_val, y_val, verbose=1)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HRWEo6Hx1gWj"
      },
      "source": [
        "# Plot Loss"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "guH1UiWifYFO",
        "outputId": "b5273bd4-5eb1-4a43-a117-1a55cf21bd24"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "# Plott Loss & Accuracy\n",
        "%matplotlib inline\n",
        "acc = history_lstm.history['accuracy']\n",
        "val_acc = history_lstm.history['val_accuracy']\n",
        "loss = history_lstm.history['loss']\n",
        "val_loss = history_lstm.history['val_loss']\n",
        "\n",
        "epochs = range(len(acc))\n",
        "\n",
        "plt.plot(epochs, acc, 'y', label='Training accuracy')\n",
        "plt.plot(epochs, val_acc, 'b', label='Validation accuracy')\n",
        "plt.title('Training and validation accuracy')\n",
        "plt.legend()\n",
        "plt.figure()\n",
        "\n",
        "plt.plot(epochs, loss, 'y', label='Training Loss')\n",
        "plt.plot(epochs, val_loss, 'b', label='Validation Loss')\n",
        "plt.title('Training and validation loss')\n",
        "plt.legend()\n",
        "\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BodureY51mpX"
      },
      "source": [
        "# Predict"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "jJUe4ZJOMEvr"
      },
      "outputs": [],
      "source": [
        "# Algorithm for making full conversation between unique client and customer service\n",
        "\n",
        "only_105860_sample = sample[sample[\"author_id\"].isin([\"105860\"])]\n",
        "only_105860_sample"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1SOx8I5qfx-O",
        "outputId": "37c657c4-314a-4077-8058-d349f71a8cc1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "I hate you\n",
            "negative : 0.774040699005127\n",
            "\n"
          ]
        }
      ],
      "source": [
        "# sentiment analysis of our sample conversation\n",
        "\n",
        "sentences = [\"I hate you\"\n",
        "           \n",
        "            ]\n",
        "for sentence in sentences:\n",
        "    print(sentence)\n",
        "    sentence = cleaningdata(sentence)\n",
        "    sentence = tokenizer.texts_to_sequences([sentence])\n",
        "    sentence = pad_sequences(sequences_train, maxlen=256, padding='post')\n",
        "    result = le.inverse_transform(np.argmax(model_sa.predict(sentence), axis=-1))[0]\n",
        "    proba =  np.max(model_sa.predict(sentence))\n",
        "    print(f\"{result} : {proba}\\n\")"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "collapsed_sections": [],
      "name": "CS_02.ipynb",
      "provenance": []
    },
    "gpuClass": "standard",
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
